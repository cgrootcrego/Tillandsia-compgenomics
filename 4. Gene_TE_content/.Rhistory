setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/")
data <- read.table("counts.Tfas_Tlei_6_timepoints.txt",header= T, row.names = 1)
View(data)
par(mfrow=c(2,3))
for (col in 1:ncol(data)) {
hist(data[,col][sample(1:11900,100)],
breaks = 50,
xlab = "read count",
main = paste0("Sample number ",col))
}
summary(data)
for (col in 6:ncol(data)) {
hist(data[,col][sample(1:11900,100)],
breaks = 50,
xlab = "read count",
main = paste0("Sample number ",col))
}
par(mfrow=c(1,2))
hist(log(cpm(data)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
library("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library("edgeR")
hist(log(cpm(data)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
data <- data[,6:]
data <- data[,6:77]
hist(log(cpm(data)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
plot(apply(log(cpm(data)), 1, mean), apply(log(cpm(data)), 1, var),
xlab="Mean expression (log(cpm))",
ylab="Variance of expression log(cpm)",
main = "Expression Variance")
data_trim = trimDat("countsTable.txt")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("HTSFilter")
no
library("HTSFilter")
data_trim = trimDat("countsTable.txt")
library("RUVSeq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RUVSeq")
library("RUVSeq")
data_trim = trimDat("countsTable.txt")
library("devtools")
trimDat()
#Function to trim the data
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data <- data[,6:77]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.txt")
write.table(data, file ="counts.Tfas_Tlei_6_timepoints.filtered.txt",
sep = "\t", quote = F)
hist(log(cpm(data_trim)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
plot(apply(log(cpm(data_trim)), 1, mean),apply(log(cpm(data_trim)), 1, var),
xlab="Mean expression (log(cpm))",
ylab="Variance of expression log(cpm)",
main = "Expression Variance")
View(data_trim)
# Plot PCA
groupGLM <- factor(c(rep("Tfas.A",6),rep("Tfas.B",6),rep("Tfas.C",6), # Populations
rep("Tfas.D",6),rep("Tfas.E",6),rep("Tfas.F",6),
rep("Tlei.A",6),rep("Tlei.C",6),rep("Tlei.D",6),
rep("Tlei.E",6),rep("Tlei.F",6),rep("Tlei.G",6)))
y <- DGEList(counts=data,group=groupGLM)
locs <- c(rep("#A71E34",6),rep("#00798C",6), rep("#F59700",6), #define colors for ecotype pairs
rep("#6E5DAC",6),rep("#EBADB5",6), rep("#B7E1D3",6),
rep("#FFD085",6),rep("#CEACEC",6),rep("#CEACEC",6),
rep("#CEACEC",6),rep("#CEACEC",6),rep("#CEACEC",6))
eco <- c(rep(17,36),rep(19,36)) #define symbols for ecotypes
#Plot PCA, change k for visualizing different numbers of components
par(mfrow=c(1,1))
plotPCA(y$counts,col=locs, k=3, cex = 1.7, pch=eco, main = "PCA of transcripts counts", labels = F)
devtools::install_github(repo = "shandiya/feathers", ref = "main")
library("feathers")
mycol = get_pal("bee_eater")[factor(groupGLM)]
mycol
mycol = get_pal("eastern_rosella")[c(2,7)]
mycol = colorRampPalette(seq_col)(12)
mycol = colorRampPalette(selected_cols)(12)
selected_cols = get_pal("eastern_rosella")[c(2,7)]
mycol = colorRampPalette(selected_cols)(12)
mycol = colorRampPalette(selected_cols)(72)
plotPCA(y$counts,col=mycol, k=3, cex = 1.7, pch=eco, main = "PCA of transcripts counts", labels = F)
get_pal("bee_eater")
samples <- c(rep("#00346E",6),rep("#007CBF",6), rep("#06ABDF",6), #define colors for ecotype pairs
rep("#EDD03E",6),rep("#F5A200",6), rep("#6D8600",6),
rep("#00346E",6),rep("#06ABDF",6),rep("#EDD03E",6),
rep("#F5A200",6),rep("#6D8600",6),rep("#424D0C",6))
plotPCA(y$counts,col=samples, k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
y <- DGEList(counts=data,group=groupGLM)
samples <- c(rep("#00346E",6),rep("#007CBF",6), rep("#06ABDF",6), #define colors for ecotype pairs
rep("#EDD03E",6),rep("#F5A200",6), rep("#6D8600",6),
rep("#00346E",6),rep("#06ABDF",6),rep("#EDD03E",6),
rep("#F5A200",6),rep("#6D8600",6),rep("#424D0C",6))
species <- c(rep(17,36),rep(19,36)) #define symbols for ecotypes
#Plot PCA, change k for visualizing different numbers of components
par(mfrow=c(1,1))
plotPCA(y$counts,col=samples, k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
y <- DGEList(counts=data_trim,group=groupGLM)
#Plot PCA, change k for visualizing different numbers of components
par(mfrow=c(1,1))
plotPCA(y$counts,col=samples, k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
plotPCA(y$counts,col=samples, k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, add.legend = T)
warnings()
plotPCA(y$counts,col=samples, k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, legend = T)
?plotPCA
?plotPCA()
plotPCA(y$counts,col=samples, k=1, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, legend = T)
1
plotPCA(y$counts,col=samples, k=2, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, legend = T)
library("RColorBrewer")
mycol = colorRampPalette(brewer.pal(13, "Set1"))
mycol
mycol
colorRampPalette(brewer.pal(13, "Set1"))
mycol <- colorRampPalette(brewer.pal(12, "Set3"))
mycol
mycol <- (brewer.pal(12, "Set3"))
mycol
mycol <- (brewer.pal(12, "Set1"))
mycol
mycol <- (brewer.pal(6, "Set1"))
mycol <- (brewer.pal(7, "Set1"))
mycol
samples <- c(rep("#E41A1C",6),rep("#377EB8",6), rep("#4DAF4A",6), #define colors for ecotype pairs
rep("#984EA3",6),rep("#FF7F00",6), rep("#FFFF33",6),
rep("#E41A1C",6),rep("#4DAF4A",6),rep("#984EA3",6),
rep("#FF7F00",6),rep("#FFFF33",6),rep("#A65628",6))
plotPCA(y$counts,col=samples, k=2, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, legend = T)
plotPCA(y$counts,col=samples,  k=3, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F, legend = T)
mycol2 <- brewer.pal(6, "Dark2")
mycol2
times <- c(rep(c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02"),12),
plotPCA(y$counts,col=times,  k=2, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
times <- c(rep(c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02"),12))
plotPCA(y$counts,col=times,  k=2, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
# Look at
par(mfrow=c(1,2))
hist(log(cpm(data)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
plot(apply(log(cpm(data)), 1, mean), apply(log(cpm(data)), 1, var),
xlab="Mean expression (log(cpm))",
ylab="Variance of expression log(cpm)",
main = "Expression Variance")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/4. Gene_TE_content/")
tfas <- read.delim("Tillandsia_fasciculata.perscaff.genic_and_TE_content.txt", header = T, sep = "\t")
View(tfas)
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/4. Gene_TE_content/")
tfas <- read.delim("Tillandsia_fasciculata.perscaff.genic_and_TE_content.txt", header = T,
sep = "\t")
View(tfas)
tfas$repetitive_content <- (tfas$repetitive_content)*0.01
tfas$repetitive_bases <- tfas$total_length * tfas$repetitive_content
tfas$ratio <- tfas$total_exonic_length / tfas$repetitive_bases
tlei <- read.delim("Tillandsia_leiboldiana.perscaff.genic_and_TE_content.txt", header = T,
sep = "\t")
tfas$repetitive_content <- (tfas$repetitive_content)*0.01
tfas$repetitive_bases <- tfas$total_length * tfas$repetitive_content
tfas$ratio <- tfas$total_exonic_length / tfas$repetitive_bases
tlei$repetitive_content <- (tlei$repetitive_content)*0.01
tlei$repetitive_bases <- tlei$total_length * tlei$repetitive_content
tlei$ratio <- tlei$total_exonic_length / tlei$repetitive_bases
View(tlei)
tfas$ratio2 <- tfas$repetitive_bases / tfas$total_exonic_length
tlei$ratio2 <- tlei$repetitive_bases / tlei$total_exonic_length
tfas <- read.delim("Tillandsia_fasciculata.perscaff.genic_and_TE_content.txt", header = T,
sep = "\t")
tfas$repetitive_content <- (tfas$repetitive_content)*0.01
tfas$repetitive_bases <- tfas$total_length * tfas$repetitive_content
tfas$ratio <- tfas$total_exonic_length / tfas$repetitive_bases
tfas$ratio2 <- tfas$repetitive_bases / tfas$total_exonic_length
ratios <- cbind(c(tfas$Scaffold, tlei$Scaffold), c(tfas$ratio2, tlei$ratio2))
View(ratios)
ratios <- as.data.frame(cbind(c(tfas$Scaffold, tlei$Scaffold), c(tfas$ratio2, tlei$ratio2)))
colnames(ratios) <- c("scaff", "rep_to_exon_ratio")
ratios <- as.data.frame(cbind(c(tfas$Scaffold, tlei$Scaffold), c(tfas$ratio2, tlei$ratio2),
c(rep("T.fasciculata", 25), rep("T.leiboldiana", 26))))
View(ratios)
colnames(ratios) <- c("scaff", "rep_to_exon_ratio", "species")
library(ggplot2)
ggpl0t(ratios, aes(y = rep_to_exon_ratio)) + geom_boxplot()
ggplot(ratios, aes(y = rep_to_exon_ratio)) + geom_boxplot()
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
summary(ratios)
ratios <- as.data.frame(cbind(c(tfas$Scaffold, tlei$Scaffold),
c(as.numeric(tfas$ratio2), as.numeric(tlei$ratio2)),
c(rep("T.fasciculata", 25), rep("T.leiboldiana", 26))))
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
colnames(ratios) <- c("scaff", "rep_to_exon_ratio", "species")
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
summary(ratios)
ratios$rep_to_exon_ratio <- as.numeric(ratios$rep_to_exon_ratio)
colnames(ratios) <- c("scaff", "rep_to_exon_ratio", "species")
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
ggplot(ratios, aes(x = rep_to_exon_ratio, color = species)) + geom_hist()
ggplot(ratios, aes(x = rep_to_exon_ratio, color = species)) + geom_histogram()
ggplot(ratios, aes(x = rep_to_exon_ratio, color = species)) + geom_histogram(binwidth = 1)
library(tidyverse)
library(ggpubr)
install.packages(ggpubr)
install.packages("ggpubr")
library(ggpubr)
library(rstatix)
data(ratios, package = "datarium")
ratios %>%
group_by(species) %>%
shapiro_test(ratios)
summary(ratios)
class(ratios$rep_to_exon_ratio)
ratios %>%
group_by(species) %>%
shapiro_test(ratios)
data(ratios, package = "datarium")
View(ratios)
ratios %>%
group_by(species)
?data()
ratios %>%
group_by(species) %>%
shapiro_test(ratios)
ratios %>%
group_by(species) %>%
shapiro_test(rep_to_exon_ratio)
# Draw a qq plot by group
ggqqplot(ratios, x = "rep_to_exon_ratio", facet.by = "group")
# Draw a qq plot by group
ggqqplot(ratios, x = "rep_to_exon_ratio", facet.by = "species")
# Levene test, equality of variances. If equal, we can use T-test, otherwise Welch's test
ratios %>% levene_test(rep_to_exon_ratio ~ species)
stat.test <- ratios %>%
t_test(rep_to_exon_ratio ~ species) %>%
add_significance()
stat.test
# A tibble: 1 × 9
#.y.               group1        group2           n1    n2 statistic    df        p p.signif
#* <chr>             <chr>         <chr>         <int> <int>     <dbl> <dbl>    <dbl> <chr>
#  1 rep_to_exon_ratio T.fasciculata T.leiboldiana    25    26     -4.00  27.6 0.000433 ***
mean(ratios$rep_to_exon_ratio)
mean(tfas$ratio2)
mean(tlei$ratio2)
mean(tfas$total_exonic_length)
mean(tlei$total_exonic_length)
