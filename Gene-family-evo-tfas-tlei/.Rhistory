geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
# simplified categories
dup <- c()
for (i in 1:nrow(tfas_genes)){
if (tfas_genes[i,6] == 1 && tfas_genes[i,5] == 1 && tfas_genes[i,7] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tfas_genes[i,6] == 1){
dup <- c(dup, "single-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,5] == 0 && tfas_genes[i,7] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tfas_genes$duplicated <- dup
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
# Divide genes into categories based on copy number
dup <- c()
for (i in 1:nrow(tfas_genes)){
if (tfas_genes[i,6] == 1){
dup <- c(dup, "single-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,5] == 0 && tfas_genes[i,7] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] > tfas_genes[i,5] && tfas_genes[i,6] > tfas_genes[i,7]){
dup <- c(dup, "largest-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] < tfas_genes[i,5] && tfas_genes[i,6] < tfas_genes[i,7]){
dup <- c(dup, "smallest-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "middle-multi-copy")
}
}
# Obtain average coverage for each category
mu <- ddply(tfas_genes, "dup", summarise, grp.mean=mean(median_cov))
head(mu)
# simplified categories
dup <- c()
for (i in 1:nrow(tfas_genes)){
if (tfas_genes[i,6] == 1 && tfas_genes[i,5] == 1 && tfas_genes[i,7] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tfas_genes[i,6] == 1){
dup <- c(dup, "single-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,5] == 0 && tfas_genes[i,7] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tfas_genes$duplicated <- dup
# Obtain average coverage for each category
mu <- ddply(tfas_genes, "dup", summarise, grp.mean=mean(median_cov))
head(mu)
sd(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3])
View(tfas_genes)
quantile(tfas_genes[tfas_genes$duplicated == "ancestral-single-copy", 3], c(.01, .05, .1, .25, .5,.75, .9, .95, .99))
# Now I select just multicopy genes - this immediately captures the full orthogroup as well.
# At this step, I remove all genes that come from orthogroups containing plastid, mitochondrial or ribosomal annotations.
# The reasoning behind this is that we can't truly use coverage statistics to adjust sizes since plastid and mitochondrial
# DNA is usually sequenced at high coverage (there are thousands of copies in each cell). Additionally, we will skip
# looking into gene family evolution of these types of genes since they have quite different dynamics (especially
# ribosomal genes).
tfas_multicopy_genes <- tfas_genes[tfas_genes$duplicated == 'multi-copy',] # 8400 genes, 2632 orthogroups
View(tfas_multicopy_genes)
tfas_multicopy_genes_no-mito <- tfas_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id))
tfas_multicopy_genes_no_mito <- tfas_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id))
# Correction accounting for variability
quantile(tfas_genes[tfas_genes$duplicated == "ancestral-single-copy", 3], c(.01, .05, .1, .25, .5,.75, .9, .95, .99))
#1%       5%      10%      25%      50%      75%      90%      95%      99%
#15.13276 22.74074 27.60464 34.74492 39.95281 43.76340 46.56272 48.43682 69.65468
lower_thresh=34.74492# 25th quantile of the average coverage of ancestral single copy genes to account for variation
upper_thresh=43.76340 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_var <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_var <- rbind(corr_Tfas_no_mito, corr_family_size)
}
tfas_multicopy_genes_no_mito <- tfas_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 7348 genes, 2353 orthogroups
# Correction without accounting for coverage variability
corr_Tfas_simple <- data.frame()
#1%       5%      10%      25%      50%      75%      90%      95%      99%
#15.13276 22.74074 27.60464 34.74492 39.95281 43.76340 46.56272 48.43682 69.65468
lower_thresh=34.74492# 25th quantile of the average coverage of ancestral single copy genes to account for variation
upper_thresh=43.76340 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_var <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_var <- rbind(corr_Tfas_no_mito, corr_family_size)
}
#1%       5%      10%      25%      50%      75%      90%      95%      99%
#15.13276 22.74074 27.60464 34.74492 39.95281 43.76340 46.56272 48.43682 69.65468
lower_thresh=34.74492# 25th quantile of the average coverage of ancestral single copy genes to account for variation
upper_thresh=43.76340 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_var <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_var <- rbind(corr_Tfas_var, corr_family_size)
}
colnames(corr_Tfas_var) <- c("og_id", "correction_factor", "corr_Tfas_count_PO","old_Tfas_count_PO", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
View(corr_Tfas_var)
nrow(corr_Tfas_no_mito[(corr_Tfas_no_mito$total_mean_cov > corr_Tfas_no_mito$Lower_thresh) & (corr_Tfas_no_mito$total_mean_cov < corr_Tfas_no_mito$Upper_thresh),])
nrow(corr_Tfas_var[(corr_Tfas_var$total_mean_cov > corr_Tfas_var$Lower_thresh) & (corr_Tfas_var$total_mean_cov < corr_Tfas_var$Upper_thresh),])
nrow(corr_Tfas_var[corr_Tfas_var$corr_Tfas_count == corr_Tfas_var$old_Tfas_count,])
# Correction without accounting for coverage variability
corr_Tfas_simple <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 46.1712
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_simple <- rbind(corr_Tfas, corr_family_size)
}
# Correction without accounting for coverage variability
corr_Tfas_simple <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 46.1712
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_simple <- rbind(corr_Tfas_simple, corr_family_size)
}
colnames(corr_Tfas_simple) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count",
"total_mean_cov", "expected_mean_cov")
nrow(corr_Tfas_var[(corr_Tfas_var$total_mean_cov > corr_Tfas_var$Lower_thresh) & (corr_Tfas_var$total_mean_cov < corr_Tfas_var$Upper_thresh),])
nrow(corr_Tfas_var[corr_Tfas_var$corr_Tfas_count == corr_Tfas_var$old_Tfas_count,])
nrow(corr_Tfas[corr_Tfas$corr_Tfas_count == corr_Tfas$old_Tfas_count,])
nrow(corr_Tfas[corr_Tfas_simple$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
nrow(corr_Tfas[corr_Tfas_var$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
nrow(corr_Tfas_simple[corr_Tfas_var$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
corr_Tfas_var$corr_Tfas_count
View(corr_Tfas_var)
View(corr_Tfas_simple)
nrow(corr_Tfas_var[corr_Tfas_var$corr_Tfas_count_PO == corr_Tfas_var$old_Tfas_count_PO,])
nrow(corr_Tfas_var[(corr_Tfas_var$total_mean_cov > corr_Tfas_var$Lower_thresh) & (corr_Tfas_var$total_mean_cov < corr_Tfas_var$Upper_thresh),])
nrow(corr_Tfas_simple[corr_Tfas_simple$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
# Per-gene size correction: I tested a system where size corrections is done on a per-gene basis.
# I assign a probablity of each gene based on its coverage with respect to the mean coverage of
# ancestral single copy genes. If the gene has the same coverage, it will have a prob of 1 and counted as
# a full gene. Lower coverages lead to adusted weighting. At the end, the adjusted weights are summed up
# into a new orthogroup size.
corr_Tfas_per_gene <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
weighting_vect <- c()
for (j in 1:nrow(orthogroup)){
mean_cov <- orthogroup[j,3]
weighting <- mean_cov / 42.9189
weighting_vect <- c(weighting_vect, weighting)
}
new_size = round(sum(weighting_vect))
nr_genes <- as.integer(orthogroup[1,6])
corr_family_size <- cbind(i, as.integer(new_size),
as.integer(nr_genes))
corr_Tfas_per_gene <- rbind(corr_Tfas_per_gene, corr_family_size)
}
# Per-gene size correction: I tested a system where size corrections is done on a per-gene basis.
# I assign a probablity of each gene based on its coverage with respect to the mean coverage of
# ancestral single copy genes. If the gene has the same coverage, it will have a prob of 1 and counted as
# a full gene. Lower coverages lead to adusted weighting. At the end, the adjusted weights are summed up
# into a new orthogroup size.
corr_Tfas_per_gene <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
weighting_vect <- c()
for (j in 1:nrow(orthogroup)){
mean_cov <- orthogroup[j,3]
weighting <- mean_cov / 42.9189
weighting_vect <- c(weighting_vect, weighting)
}
new_size = round(sum(weighting_vect))
nr_genes <- as.integer(orthogroup[1,6])
corr_family_size <- cbind(i, as.integer(new_size),
as.integer(nr_genes))
corr_Tfas_per_gene <- rbind(corr_Tfas_per_gene, corr_family_size)
}
colnames(corr_Tfas_per_gene) <- c("og_id", "corr_Tfas_count_PG","old_Tfas_count_PG")
nrow(corr_Tfas_var[(corr_Tfas_var$total_mean_cov > corr_Tfas_var$Lower_thresh) & (corr_Tfas_var$total_mean_cov < corr_Tfas_var$Upper_thresh),])
# 549 orthogroups are inside threshold
nrow(corr_Tfas_var[corr_Tfas_var$corr_Tfas_count_PO == corr_Tfas_var$old_Tfas_count_PO,]) #
# 825 genes have been unchanged (so more than genes in thresholds, probably because of rounding)
nrow(corr_Tfas_simple[corr_Tfas_simple$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
# Comparing a per-gene correction approach to a per-orthogroup approach. Here, corrections were made
# in both directions (increase and decrease in size) and without accounting for variability
comparison_siye_corr <- merge(corr_Tfas, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,4,3,7)]
# Comparing a per-gene correction approach to a per-orthogroup approach. Here, corrections were made
# in both directions (increase and decrease in size) and without accounting for variability
comparison_siye_corr <- merge(corr_Tfas_simple, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,4,3,7)]
colnames(comparison_size_corr) <- c("og_id", "uncorrected_count", "correction_per_OG", "correction_per_GENE")
comp_m <- melt(comparison_size_corr, id.vars = "og_id")
comp_m$variable <- as.factor(comp_m$variable)
comp_m$value <- as.integer(comp_m$value)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1)+
xlim(0,25)
comparison_size_corr$diff_per_OG <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_OG)
comparison_size_corr$diff_per_GENE <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_GENE)
comparison_size_corr$diff_approach <- as.numeric(abs(comparison_size_corr$diff_per_OG)) - abs(as.numeric(comparison_size_corr$diff_per_GENE))
diff_melt <- melt(comparison_size_corr[, c(1,5,6)], id.vars = "og_id")
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1) +
xlim(-25,25)
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1) +
xlim(-25,25) +
xlab("Differences in size corrections (difference_per_orthogroup - difference_per_gene")
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_histogram(binwidth=1)
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_boxplot()
mean(comparison_size_corr$diff_approach) # -1.54
View(diff_melt)
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_boxplot()
# Correction without accounting for coverage variability
corr_Tfas_simple <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_simple <- rbind(corr_Tfas_simple, corr_family_size)
}
colnames(corr_Tfas_simple) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count",
"total_mean_cov", "expected_mean_cov")
nrow(corr_Tfas_var[(corr_Tfas_var$total_mean_cov > corr_Tfas_var$Lower_thresh) & (corr_Tfas_var$total_mean_cov < corr_Tfas_var$Upper_thresh),])
# 549 orthogroups are inside threshold
nrow(corr_Tfas_var[corr_Tfas_var$corr_Tfas_count_PO == corr_Tfas_var$old_Tfas_count_PO,])
# 825 genes have been unchanged (so more than genes in thresholds, probably because of rounding)
nrow(corr_Tfas_simple[corr_Tfas_simple$corr_Tfas_count == corr_Tfas_simple$old_Tfas_count,])
# Comparing a per-gene correction approach to a per-orthogroup approach. Here, corrections were made
# in both directions (increase and decrease in size) and without accounting for variability
comparison_siye_corr <- merge(corr_Tfas_simple, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,4,3,7)]
colnames(comparison_size_corr) <- c("og_id", "uncorrected_count", "correction_per_OG", "correction_per_GENE")
# calculate differences in corrections
comparison_size_corr$diff_per_OG <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_OG)
comparison_size_corr$diff_per_GENE <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_GENE)
comparison_size_corr$diff_approach <- as.numeric(abs(comparison_size_corr$diff_per_OG)) - abs(as.numeric(comparison_size_corr$diff_per_GENE))
# See how much the differences deviate
diff_melt <- melt(comparison_size_corr[, c(1,5,6)], id.vars = "og_id")
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1) +
xlim(-25,25) +
xlab("Differences in size corrections (difference_per_orthogroup - difference_per_gene")
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_boxplot()
mean(comparison_size_corr$diff_approach) # 0.010
table(comparison_size_corr$diff_approach)
View(comparison_size_corr)
# Given the little differences between per-orthogroup and per-gene method, and the little importance
# and limitations of accounting for variability in coverage, I decided to stick to the corrected sizes of per-orthogroup
# approach without accounting for variability.
write.table(corr_Tfas_simple, file = "corrected_family_sizes_Tfas.txt")
###########################################################################################
### Same for Tleiboldiana
setwd("/home/clara/Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
tlei_genes <- read.table("Tlei_pergene_mediancov_and_orthoinfo.txt", header = T)
mean(tlei_genes$median_cov) # 67.04
mean(tlei_genes$mean_cov) # 66.73
dup <- c()
for (i in 1:nrow(tlei_genes)){
if (tlei_genes[i,7] == 1){
dup <- c(dup, "single-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,5] == 0 && tlei_genes[i,6] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] > tlei_genes[i,5] && tlei_genes[i,7] > tlei_genes[i,6]){
dup <- c(dup, "largest-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] < tlei_genes[i,5] && tlei_genes[i,7] < tlei_genes[i,6]){
dup <- c(dup, "smallest-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] == tlei_genes[i,5] && tlei_genes[i,7] == tlei_genes[i,6]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "middle-multi-copy")
}
}
tlei_genes$duplicated <- dup
# simplified
dup <- c()
for (i in 1:nrow(tlei_genes)){
if (tlei_genes[i,7] == 1 && tlei_genes[i,5] == 1 && tlei_genes[i,6] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tlei_genes[i,7] == 1){
dup <- c(dup, "single-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,5] == 0 && tlei_genes[i,6] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] == tlei_genes[i,5] && tlei_genes[i,7] == tlei_genes[i,6]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tlei_genes$duplicated <- dup
# simplified
dup <- c()
for (i in 1:nrow(tlei_genes)){
if (tlei_genes[i,7] == 1 && tlei_genes[i,5] == 1 && tlei_genes[i,6] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tlei_genes[i,7] == 1){
dup <- c(dup, "single-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,5] == 0 && tlei_genes[i,6] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] == tlei_genes[i,5] && tlei_genes[i,7] == tlei_genes[i,6]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tlei_genes$duplicated <- dup
mu <- ddply(tlei_genes, "dup", summarise, grp.mean=mean(mean_cov))
head(mu)
ggplot(tlei_genes, aes(x=mean_cov, colour=duplicated)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 53.34, linetype = "longdash", color = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
ggplot(tlei_genes, aes(x=median_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 53.34, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
# Corrections on all multicopy genes.
# Correcting the gene family sizes based on coverage differences for all multicopy genes
Tlei_multicopy <- tlei_genes[tlei_genes$duplicated == "multi-copy",]
corr_Tlei <- data.frame()
# Corrections on all multicopy genes.
# Correcting the gene family sizes based on coverage differences for all multicopy genes
Tlei_multicopy <- tlei_genes[tlei_genes$duplicated == "multi-copy",]
corr_Tlei <- data.frame()
for (i in unique(Tlei_multicopy$og_id)){
for (i in unique(Tlei_multicopy$og_id)){
orthogroup <- Tlei_multicopy[Tlei_multicopy$og_id == i,]
nr_genes <- as.integer(orthogroup[1,7])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 50.69818
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
# if (correction_factor > 1){
#   new_size = nr_genes
# }
if (total_mean_cov < 50.69818){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tlei <- rbind(corr_Tlei, corr_family_size)
}
View(corr_Tlei)
View(corr_Tfas_simple)
sum(unique(tfas_genes$og_id))
sum(unique(tfas_genes$og_id))
count(unique(tfas_genes$og_id))
unique(tfas_genes$og_id)
nrwo(unique(tfas_genes$og_id))
nrow(unique(tfas_genes$og_id))
dim(unique(tfas_genes$og_id))
dim(unique(tfas_multicopy_genes$og_id))
unique(tfas_multicopy_genes$og_id)
length(unique(tfas_no_mito_multicopy_genes$og_id))
length(unique(tfas_multicopy_genes$og_id))
length(unique(tfas_multicopy_genes_no_mito$og_id))
View(mito_og)
# Corrections on all multicopy genes, except for ribosomal / plastid / mitochondrial.
tlei_multicopy_genes_no_mito <- tlei_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 7348 genes, 2353 orthogroups
# Corrections on all multicopy genes, except for ribosomal / plastid / mitochondrial.
tlei_multicopy_genes <- tlei_genes[tfas_genes$duplicated == 'multi-copy',] # 8400 genes, 2632 orthogroups
tlei_multicopy_genes_no_mito <- tlei_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 7348 genes, 2353 orthogroups
# Corrections on all multicopy genes, except for ribosomal / plastid / mitochondrial.
tlei_multicopy_genes <- tlei_genes[tlei_genes$duplicated == 'multi-copy',] # 8400 genes, 2632 orthogroups
tlei_multicopy_genes_no_mito <- tlei_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 7348 genes, 2353 orthogroups
View(tlei_multicopy_genes)
length(unique(tlei_multicopy_genes$og_id))
length(unique(tlei_multicopy_genes_no_mito$og_id))
corr_Tlei <- data.frame()
for (i in unique(Tlei_multicopy$og_id)){
orthogroup <- Tlei_multicopy[Tlei_multicopy$og_id == i,]
nr_genes <- as.integer(orthogroup[1,7])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 50.69818
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
# if (correction_factor > 1){
#   new_size = nr_genes
# }
if (total_mean_cov < 50.69818){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tlei <- rbind(corr_Tlei, corr_family_size)
}
View(corr_Tlei)
colnames(corr_Tlei) <- c("og_id", "correction_factor", "corr_Tlei_count","old_Tlei_count", "total_mean_cov", "expected_mean_cov")
write.table(corr_Tlei, file = "corrected_family_sizes_Tlei.txt")
View(corr_Tlei)
