dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tfas_genes$duplicated <- dup
# Obtain average coverage for each category
mu <- ddply(tfas_genes, "dup", summarise, grp.mean=mean(median_cov))
head(mu)
library(dplyr)
library(ggplot2)
library(plyr)
library(dplyr)
library(wesanderson)
library(reshape2)
# Obtain average coverage for each category
mu <- ddply(tfas_genes, "dup", summarise, grp.mean=mean(median_cov))
head(mu)
# Set colors for simple categories
mycolors <- c(wes_palette("Darjeeling1")[1], wes_palette("Darjeeling1")[2], wes_palette("FantasticFox1")[3],
wes_palette("Darjeeling1")[3], wes_palette("GrandBudapest1")[3])
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
---------------
# UPDATE 27.07: I skipped establishing a cutoff and corrected sizes for all multicopy families
#
### Establish a cutoff to separate "real" from "faulty" gene models
## Using the package "cutoff", we can establish a cut-off value that separates the bimodal
## distribution into two unimodal, normal distributions. The cut-off value represents the point
## where the likelihood of a datapoint belonging only to one of the two distributions is high
## enough that we can call it with confidence. This will be a slightly conservative value, but
## allows us to separate the two groups based on statistics and probability.
#devtools::install_github("choisy/cutoff")
#install.packages("cli")
#install.packages("bbmle")
#library(cutoff)
#tfas_multicopy_mean_cov <- as.vector(tfas_genes[tfas_genes$duplicated == 'multi-copy', 3])
#tfas_multicopy_mean_cov_df <- tfas_genes[tfas_genes$duplicated == 'multi-copy',]
#tfas_multicopy_mean_cov_subset <- tfas_multicopy_mean_cov[tfas_multicopy_mean_cov < 100]
#tfas_multicopy_FMM <- em(tfas_multicopy_mean_cov_subset, 'normal', 'normal')
#hist(tfas_multicopy_mean_cov_subset,10000,F,xlim=c(0,100),xlab="median coverage",ylab="density",main=NULL,col="grey")
#lines(tfas_multicopy_FMM,lwd=1.5,col="red")
#abline(v=34.5,lty=2,col="lightblue")
#cut_off <- cutoff(tfas_multicopy_FMM)
#cut_off # Genes with mean cov < 34.5 belong to "faulty" category
#faulty_genes <- tfas_multicopy_mean_cov_df[tfas_multicopy_mean_cov_df$mean_cov < 34.5,] # 4753 genes
#table(faulty_genes$Tfas_count)
# Recording all genes with high coverage to explore further (mostly mitochondrial and plastid)
# high_cov_genes <- tfas_genes[tfas_genes$mean_cov > 100,]
# write.table(high_cov_genes, file = "100x_genes_Tfas.txt")
# Recording all genes with a mean coverage < 34.5 to correct gene family sizes
#write.table(faulty_genes, file = "faulty_gene_families_35x.txt")
# Select all orthogroups containing faulty genes
# library(dplyr)
# orthogroups_w_faulty_genes <- tfas_genes %>%
#  filter(og_id %in% faulty_genes$og_id)
# This resulted in 6861 genes and 1981 orthogroups
-----------------
# Correcting the gene family sizes based on coverage differences
# Now I select just multicopy genes - this immediately captures the full orthogroup as well.
# At this step, I remove all genes that come from orthogroups containing plastid, mitochondrial or ribosomal annotations.
# The reasoning behind this is that we can't truly use coverage statistics to adjust sizes since plastid and mitochondrial
# DNA is usually sequenced at high coverage (there are thousands of copies in each cell). Additionally, we will skip
# looking into gene family evolution of these types of genes since they have quite different dynamics (especially
# ribosomal genes).
tfas_multicopy_genes <- tfas_genes[tfas_genes$duplicated == 'multi-copy',] # 8400 genes, 2632 orthogroups
---------------
# UPDATE 27.07: I skipped establishing a cutoff and corrected sizes for all multicopy families
#
### Establish a cutoff to separate "real" from "faulty" gene models
## Using the package "cutoff", we can establish a cut-off value that separates the bimodal
## distribution into two unimodal, normal distributions. The cut-off value represents the point
## where the likelihood of a datapoint belonging only to one of the two distributions is high
## enough that we can call it with confidence. This will be a slightly conservative value, but
## allows us to separate the two groups based on statistics and probability.
#devtools::install_github("choisy/cutoff")
#install.packages("cli")
#install.packages("bbmle")
#library(cutoff)
#tfas_multicopy_mean_cov <- as.vector(tfas_genes[tfas_genes$duplicated == 'multi-copy', 3])
#tfas_multicopy_mean_cov_df <- tfas_genes[tfas_genes$duplicated == 'multi-copy',]
#tfas_multicopy_mean_cov_subset <- tfas_multicopy_mean_cov[tfas_multicopy_mean_cov < 100]
#tfas_multicopy_FMM <- em(tfas_multicopy_mean_cov_subset, 'normal', 'normal')
#hist(tfas_multicopy_mean_cov_subset,10000,F,xlim=c(0,100),xlab="median coverage",ylab="density",main=NULL,col="grey")
#lines(tfas_multicopy_FMM,lwd=1.5,col="red")
#abline(v=34.5,lty=2,col="lightblue")
#cut_off <- cutoff(tfas_multicopy_FMM)
#cut_off # Genes with mean cov < 34.5 belong to "faulty" category
#faulty_genes <- tfas_multicopy_mean_cov_df[tfas_multicopy_mean_cov_df$mean_cov < 34.5,] # 4753 genes
#table(faulty_genes$Tfas_count)
# Recording all genes with high coverage to explore further (mostly mitochondrial and plastid)
# high_cov_genes <- tfas_genes[tfas_genes$mean_cov > 100,]
# write.table(high_cov_genes, file = "100x_genes_Tfas.txt")
# Recording all genes with a mean coverage < 34.5 to correct gene family sizes
#write.table(faulty_genes, file = "faulty_gene_families_35x.txt")
# Select all orthogroups containing faulty genes
# library(dplyr)
# orthogroups_w_faulty_genes <- tfas_genes %>%
#  filter(og_id %in% faulty_genes$og_id)
# This resulted in 6861 genes and 1981 orthogroups
-----------------
# Correcting the gene family sizes based on coverage differences
# Now I select just multicopy genes - this immediately captures the full orthogroup as well.
# At this step, I remove all genes that come from orthogroups containing plastid, mitochondrial or ribosomal annotations.
# The reasoning behind this is that we can't truly use coverage statistics to adjust sizes since plastid and mitochondrial
# DNA is usually sequenced at high coverage (there are thousands of copies in each cell). Additionally, we will skip
# looking into gene family evolution of these types of genes since they have quite different dynamics (especially
# ribosomal genes).
tfas_multicopy_genes <- tfas_genes[tfas_genes$duplicated == 'multi-copy',] # 8400 genes, 2632 orthogroups
tfas_multicopy_genes <- tfas_genes[tfas_genes$duplicated == 'multi-copy',]
mito_og <- read.table("mito_plastid_ribo_OGs_to_remove.txt", header = F, sep = "\t") # list with mito-ribo-plastid orthogroups
colnames(mito_og) <- c("og_id")
tfas_multicopy_genes_no_mito <- tfas_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 7348 genes, 2353 orthogroups
length(unique(tfas_multicopy_genes_no_mito$og_id))
# Correction without accounting for coverage variability
corr_Tfas_simple <- data.frame()
for (i in unique(tfas_multicopy_genes_no_mito$og_id)){
orthogroup <- tfas_multicopy_genes_no_mito[tfas_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_simple <- rbind(corr_Tfas_simple, corr_family_size)
}
colnames(corr_Tfas_simple) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count",
"total_mean_cov", "expected_mean_cov")
View(corr_Tfas_simple)
# Given the little differences between per-orthogroup and per-gene method, and the little importance
# and limitations of accounting for variability in coverage, I decided to stick to the corrected sizes of per-orthogroup
# approach without accounting for variability.
write.table(corr_Tfas_simple, file = "corrected_family_sizes_Tfas.txt")
tlei_genes <- read.table("Tlei_pergene_mediancov_and_orthoinfo.txt", header = T)
mean(tlei_genes$median_cov) # 67.04
mean(tlei_genes$mean_cov) # 66.73
# simplified
dup <- c()
for (i in 1:nrow(tlei_genes)){
if (tlei_genes[i,7] == 1 && tlei_genes[i,5] == 1 && tlei_genes[i,6] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tlei_genes[i,7] == 1){
dup <- c(dup, "single-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,5] == 0 && tlei_genes[i,6] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tlei_genes[i,7] > 1 && tlei_genes[i,7] == tlei_genes[i,5] && tlei_genes[i,7] == tlei_genes[i,6]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tlei_genes$duplicated <- dup
mu <- ddply(tlei_genes, "dup", summarise, grp.mean=mean(mean_cov))
head(mu)
# Corrections on all multicopy genes, except for ribosomal / plastid / mitochondrial.
tlei_multicopy_genes <- tlei_genes[tlei_genes$duplicated == 'multi-copy',] # 4306 genes, 1450 orthogroups
tlei_multicopy_genes_no_mito <- tlei_multicopy_genes %>%
filter(!(og_id %in% mito_og$og_id)) # 3857 genes, 1295 orthogroups
length(unique(tlei_multicopy_genes_no_mito$og_id))
corr_Tlei <- data.frame()
for (i in unique(Tlei_multicopy$og_id)){
orthogroup <- Tlei_multicopy[Tlei_multicopy$og_id == i,]
nr_genes <- as.integer(orthogroup[1,7])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 50.69818
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
# if (correction_factor > 1){
#   new_size = nr_genes
# }
if (total_mean_cov < 50.69818){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tlei <- rbind(corr_Tlei, corr_family_size)
}
corr_Tlei <- data.frame()
for (i in unique(tlei_multicopy_genes_no_mito$og_id)){
orthogroup <- tlei_multicopy_genes_no_mito[tlei_multicopy_genes_no_mito$og_id == i,]
nr_genes <- as.integer(orthogroup[1,7])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 50.69818
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
# if (correction_factor > 1){
#   new_size = nr_genes
# }
if (total_mean_cov < 50.69818){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tlei <- rbind(corr_Tlei, corr_family_size)
}
colnames(corr_Tlei) <- c("og_id", "correction_factor", "corr_Tlei_count","old_Tlei_count", "total_mean_cov", "expected_mean_cov")
write.table(corr_Tlei, file = "corrected_family_sizes_Tlei.txt")
View(corr_Tlei)
sum(corr_Tlei$corr_Tlei_count)
sum(as.integer(corr_Tlei$corr_Tlei_count))
sum(as.integer(corr_Tlei$old_Tlei_count))
sum(as.integer(corr_Tfas$old_Tlei_count))
sum(as.integer(corr_Tfas_simple$corr_Tfas_count))
sum(as.integer(corr_Tfas_simple$old_Tfas_count))
write.table(corr_Tlei, file = "corrected_family_sizes_Tlei.txt", sep = "\t",
quote = F, row.names = F)
# Given the little differences between per-orthogroup and per-gene method, and the little importance
# and limitations of accounting for variability in coverage, I decided to stick to the corrected sizes of per-orthogroup
# approach without accounting for variability.
write.table(corr_Tfas_simple, file = "corrected_family_sizes_Tfas.txt", sep = "\t",
quote = F, row.names = F)
setwd("Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = '\t')
colnames(counts) <- c("og_id", "Acom", "Tfas", "Tlei")
# Filter out unique orthogroups
counts_Tfas_Tlei <- counts[counts$Tfas != 0 & counts$Tlei != 0,]
View(counts_Tfas_Tlei)
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = '\t')
colnames(counts) <- c("og_id", "Acom", "Tfas", "Tlei")
# Filter out unique orthogroups
counts_Tfas_Tlei <- counts[counts$Tfas != 0 & counts$Tlei != 0,]
ggplot(counts_Tfas_Tlei, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
# Add colour gradient to show number of datapoints with the same count combination
counts_Tfas_Tlei_multi <- counts_Tfas_Tlei[!(counts_Tfas_Tlei$Tfas == 1 & counts_Tfas_Tlei$Tlei == 1),]
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
theme_bw()
sum(as.integer(counts_Tfas_Tlei$Tfas))
sum((counts_Tfas_Tlei$Tfas))
sum((counts_Tfas_Tlei$Tlei))
sum((counts_Tfas_Tlei_multi$Tlei))
sum((counts_Tfas_Tlei_multi$Tfas))
counts_more_Tlei <- counts_Tfas_Tlei_multi[(counts_Tfas_Tlei_multi$Tfas < counts_Tfas_Tlei_multi$Tlei),]
counts_more_Tfas <- counts_Tfas_Tlei_multi[(counts_Tfas_Tlei_multi$Tfas > counts_Tfas_Tlei_multi$Tlei),]
View(counts_more_Tfas)
write.table(counts_Tfas_Tlei_multi, file = "orthogroup_selection_multicopy_for_GO_term_all.txt", sep = "\t")
write.table(counts_more_Tfas, file = "orthogroup_selection_multicopy_larger_in_Tfas.txt", sep = "\t")
write.table(counts_more_Tlei, file = "orthogroup_selection_multicopy_larger_in_Tlei.txt", sep = "\t")
write.table(counts_Tfas_Tlei_multi, file = "orthogroup_selection_multicopy_for_GO_term_all.txt", sep = "\t", quote = F, row.names = F)
write.table(counts_more_Tfas, file = "orthogroup_selection_multicopy_larger_in_Tfas.txt", sep = "\t", quote = F, row.names = F)
write.table(counts_more_Tlei, file = "orthogroup_selection_multicopy_larger_in_Tlei.txt", sep = "\t", quote = F, row.names = F)
length(counts_Tfas_Tlei_multi$Tfas)
sum(counts_Tfas_Tlei_multi$Tfas)
sum(counts_Tfas_Tlei_multi$Tlei)
sum(counts_Tfas_Tlei_multi$Acom)
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
theme_bw()
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
scale_x_log10() +
theme_bw()
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
scale_x_log10() +
scale_y_log10()
View(counts_Tfas_Tlei_multi)
counts_Tfas_Tlei_multi$Tfas_log <- log(counts_Tfas_Tlei_multi$Tfas)
counts_Tfas_Tlei_multi$Tlei_log <- log(counts_Tfas_Tlei_multi$Tlei)
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas_log, Tlei_log), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
theme_bw()
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei), bins = 100, fill = stat(log(count))) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
theme_bw()
ggplot(counts_Tfas_Tlei_multi) + geom_hex(aes(Tfas, Tlei, fill = stat(log(count))), bins = 100) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
scale_fill_continuous(type = "viridis") +
theme_bw()
# Load packages
library(topGO)
library(stringr)
# Load functions
change_names <- function(data, name_list){
colnames(data) <- name_list
return(data)
}
rename <- function(table, geneNames){
names(table) <- geneNames
return(table)
}
attach_enriched_go_genes <- function(enriched_go_with_my_genes){
enriched_go_with_my_genes.list = c()
for (i in 1:length(enriched_go_with_my_genes)){
enriched_go_with_my_genes.list = c(enriched_go_with_my_genes.list, enriched_go_with_my_genes[[i]])
}
return(enriched_go_with_my_genes.list)
}
create_orthog_list <- function(go.dataframe, per_gene){
genes <- str_split(go.dataframe[,4], ", ")
orthog.l <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- vector()
for (j in i){
new <- as.character(per_gene[per_gene$V1==j,7])
orthog <- c(orthog, new)
}
orthog_uniq <- unique(orthog)
orthog_string <- paste(orthog_uniq, collapse = ', ')
orthog.l[[l]] <- orthog_string
l = l+1
orthog <- c()
}
names(orthog.l) <- c(go.dataframe$ID)
orthog.list = attach_enriched_go_genes(orthog.l)
return(orthog.list)
}
# Run enrichment for all multicopy genes
geneID2GO <- readMappings(file = "genes_to_GO.map")
GO2geneID <- inverseList(geneID2GO)
geneNames <- names(geneID2GO)
dup_genes <- read.table("dup_genes_Tfas-Tlei_ID.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
str(geneList)
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch")
table = as.factor(geneNames) %in% dup_genes$V1
int_table = as.integer(table)
int_fac_table = factor(int_table)
fac_table = rename(table = int_fac_table, geneNames = geneNames)
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher")
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher")
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher")
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.BP2 = cbind(allRes.BP1,"BP")
allRes.BP = change_names(data = allRes.BP2, name_list = name_list)
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.MF2 = cbind(allRes.MF1,"MF")
allRes.MF = change_names(data = allRes.MF2, name_list = name_list)
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.MF = genesInTerm(GOdata.MF)
allGO.CC = genesInTerm(GOdata.CC)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
# Create final table
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  dup_genes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = (sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
View(go.dataframe)
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
go.dataframe[101,5] <- "1e-30"
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
.
# Add orthogroups
orthog.list <- create_orthog_list(go.dataframe, per_gene)
per_gene <- read.delim("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt",
sep = "\t", header = F)
# Add orthogroups
orthog.list <- create_orthog_list(go.dataframe, per_gene)
per_gene <- read.delim("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt",
sep = "\t", header = F)
# Add orthogroups
orthog.list <- create_orthog_list(go.dataframe, per_gene)
go.dataframe2 = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)),
"Orthogroups" = as.vector(orthog.list),
"Genes" = as.vector(enriched_go_with_my_genes.list)
)
new_DF <- go.dataframe2[rowSums(is.na(go.dataframe2)) > 0,]
View(new_DF)
go.dataframe2[101,5] <- "1e-30"
go.dataframe2$adj_pval <- as.numeric(go.dataframe2$adj_pval)
write.table(go.dataframe2, file = "Enriched_GO_terms_Tfas-Tlei_ALL_multicopy_genes.txt", sep = "\t",
quote = F, row.names = F)
dup_genes <- read.table("dup_genes_larger_in_Tfas.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
str(geneList)
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch")
table = as.factor(geneNames) %in% dup_genes$V1
int_table = as.integer(table)
int_fac_table = factor(int_table)
fac_table = rename(table = int_fac_table, geneNames = geneNames)
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher")
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher")
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher")
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.BP2 = cbind(allRes.BP1,"BP")
allRes.BP = change_names(data = allRes.BP2, name_list = name_list)
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.MF2 = cbind(allRes.MF1,"MF")
allRes.MF = change_names(data = allRes.MF2, name_list = name_list)
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.MF = genesInTerm(GOdata.MF)
allGO.CC = genesInTerm(GOdata.CC)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  dup_genes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
go.dataframe[101,5] <- "1e-30"
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
# Add orthogroups
orthog.list <- create_orthog_list(go.dataframe, per_gene)
go.dataframe2 = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)),
"Orthogroups" = as.vector(orthog.list),
"Genes" = as.vector(enriched_go_with_my_genes.list)
)
new_DF <- go.dataframe2[rowSums(is.na(go.dataframe2)) > 0,]
View(new_DF)
go.dataframe2[101,5] <- "1e-30"
go.dataframe2$adj_pval <- as.numeric(go.dataframe2$adj_pval)
write.table(go.dataframe2, file = "Enriched_GO_terms_multicopy_genes_larger-in-Tfas.txt", sep = "\t",
quote = F, row.names = F)
dup_genes <- read.table("dup_genes_larger_in_Tlei.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
str(geneList)
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch")
table = as.factor(geneNames) %in% dup_genes$V1
int_table = as.integer(table)
int_fac_table = factor(int_table)
fac_table = rename(table = int_fac_table, geneNames = geneNames)
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher")
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher")
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher")
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.BP2 = cbind(allRes.BP1,"BP")
allRes.BP = change_names(data = allRes.BP2, name_list = name_list)
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.MF2 = cbind(allRes.MF1,"MF")
allRes.MF = change_names(data = allRes.MF2, name_list = name_list)
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100, numChar=1000)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.MF = genesInTerm(GOdata.MF)
allGO.CC = genesInTerm(GOdata.CC)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  dup_genes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
orthog.list <- create_orthog_list(go.dataframe, per_gene)
go.dataframe2 = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)),
"Orthogroups" = as.vector(orthog.list),
"Genes" = as.vector(enriched_go_with_my_genes.list)
)
new_DF <- go.dataframe2[rowSums(is.na(go.dataframe2)) > 0,]
go.dataframe2$adj_pval <- as.numeric(go.dataframe2$adj_pval)
write.table(go.dataframe2, file = "Enriched_GO_terms_multicopy_genes_larger-in-Tlei.txt", sep = "\t",
quote = F, row.names = F)
