sd(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3])
mean(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3])
quantile(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3], c(.25, .5,.75))
quantile(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3], c(.1, .5,.75))
quantile(tfas_genes[tfas_genes$duplicated == "ancestral-single-copy", 3], c(.25,.1, .75,.95))
table(tfas_no_mito$duplicated)
quantile(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3], c(.1, .25, .5,.75, .9))
quantile(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3], c(.01,.1, .25, .5,.75, .9, .99))
quantile(tfas_no_mito[tfas_no_mito$duplicated == "ancestral-single-copy", 3], c(.01, .05, .1, .25, .5,.75, .9, .95, .99))
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
ggplot(tfas_no_mito, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
ggplot(tfas_no_mito, aes(x=mean_cov, color=duplicated)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
write.table(high_cov_genes, file = "100x_genes_Tfas.txt")
tfas_no-mito_multicopy_genes <- tfas_no_mito[tfas_no_mito$duplicated == 'multi-copy',]
tfas_no-mito_multicopy_genes <- tfas_no_mito[tfas_no_mito$duplicated == 'multi-copy',]
tfas_no-mito_multicopy_genes <- tfas_no_mito[tfas_no_mito$duplicated == 'multi-copy',]
tfas_no_mito_multicopy_genes <- tfas_no_mito[tfas_no_mito$duplicated == 'multi-copy',]
length(unique(tfas_no_mito_multicopy_genes$og_id))
corr_Tfas <- data.frame()
lower_thresh=22.41436 # 5th quantile of the average coverage of ancestral single copy genes to accont for variation
upper_thresh=48.44374 # 95th quantile of the average coverage of ancestral single copy genes
lower_thresh=22.41436 # 5th quantile of the average coverage of ancestral single copy genes to accont for variation
upper_thresh=48.44374 # 95th quantile of the average coverage of ancestral single copy genes
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov > upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov > upper_thresh_total){
new_size = nr_genes
}
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
lower_thresh_total < total_mean_cov > upper_thresh_total
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov > upper_thresh_total){
new_size = nr_genes
}
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov")
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov")
View(corr_Tfas_no_mito)
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov > upper_thresh_total){
new_size = nr_genes
}
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
View(corr_Tfas_no_mito)
lower_thresh_total < total_mean_cov
total_mean_cov > upper_thresh_total
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
corr_Tfas <- data.frame()
for (i in unique(tfas_multicopy_genes$og_id)){
orthogroup <- tfas_multicopy_genes[tfas_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 46.1712
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas <- rbind(corr_Tfas, corr_family_size)
}
colnames(corr_Tfas) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count",
"total_mean_cov", "expected_mean_cov")
View(corr_Tfas)
View(tfas_multicopy_genes)
View(corr_Tfas_no_mito)
lower_thresh=34.5079# 25th quantile of the average coverage of ancestral single copy genes to accont for variation
upper_thresh=43.6752 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
if (correction_factor > 1){
new_size = nr_genes
}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
lower_thresh=34.5079# 25th quantile of the average coverage of ancestral single copy genes to accont for variation
upper_thresh=43.6752 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
library(ggplot2)
setwd("/home/clara/Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections.txt", sep = '\t')
View(increase_plastid)
View(counts)
View(mito_og)
View(tfas_no_mito)
View(orthogroup)
# Per-gene size correction: I tested a system where size corrections is done on a per-gene basis.
# I assign a probablity of each gene based on its coverage with respect to the mean coverage of
# ancestral single copy genes. If the gene has the same coverage, it will have a prob of 1 and counted as
# a full gene. Lower coverages lead to adusted weighting. At the end, the adjusted weights are summed up
# into a new orthogroup size.
corr_Tfas_per_gene <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
weighting_vect <- c()
for (j in 1:nrow(orthogroup)){
mean_cov <- orthogroup[j,3]
weighting <- mean_cov / 42.9189
weighting_vect <- c(weighting_vect, weighting)
}
new_size = round(sum(weighting_vect))
nr_genes <- as.integer(orthogroup[1,6])
corr_family_size <- cbind(i, as.integer(new_size),
as.integer(nr_genes))
corr_Tfas_per_gene <- rbind(corr_Tfas, corr_family_size)
}
# Per-gene size correction: I tested a system where size corrections is done on a per-gene basis.
# I assign a probablity of each gene based on its coverage with respect to the mean coverage of
# ancestral single copy genes. If the gene has the same coverage, it will have a prob of 1 and counted as
# a full gene. Lower coverages lead to adusted weighting. At the end, the adjusted weights are summed up
# into a new orthogroup size.
corr_Tfas_per_gene <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
weighting_vect <- c()
for (j in 1:nrow(orthogroup)){
mean_cov <- orthogroup[j,3]
weighting <- mean_cov / 42.9189
weighting_vect <- c(weighting_vect, weighting)
}
new_size = round(sum(weighting_vect))
nr_genes <- as.integer(orthogroup[1,6])
corr_family_size <- cbind(i, as.integer(new_size),
as.integer(nr_genes))
corr_Tfas_per_gene <- rbind(corr_Tfas_per_gene, corr_family_size)
}
View(corr_Tfas_per_gene)
colnames(corr_Tfas_per_gene) <- c("og_id", "corr_Tfas_count","old_Tfas_count")
lower_thresh=34.5079# 25th quantile of the average coverage of ancestral single copy genes to account for variation
upper_thresh=43.6752 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count_PO","old_Tfas_count_PO", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
comparison_siye_corr <- merge(corr_Tfas_no_mito, corr_Tfas_per_gene, by = og.id)
comparison_siye_corr <- merge(corr_Tfas_no_mito, corr_Tfas_per_gene, by = og_id)
comparison_siye_corr <- merge(corr_Tfas_no_mito, corr_Tfas_per_gene, by = "og_id")
View(comparison_siye_corr)
comparison_size_corr <- comparison_siye_corr[,c(1,3,4,9)]
View(comparison_size_corr)
comparison_siye_corr <- merge(corr_Tfas, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,3,4,9)]
comparison_siye_corr <- merge(corr_Tfas, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,3,4,9)]
comparison_size_corr <- comparison_siye_corr[,c(1,3,4,6)]
comparison_size_corr <- comparison_siye_corr[,c(1,3,4,7)]
comparison_size_corr <- comparison_siye_corr[,c(1,4,3,7)]
colnames(comparison_size_corr) <- c("og_id", "uncorrected_count", "correction_per_OG", "correction_per_GENE")
# Correction without accounting for coverage variability
corr_Tfas <- data.frame()
for (i in unique(tfas_multicopy_genes$og_id)){
orthogroup <- tfas_multicopy_genes[tfas_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
expected_mean_cov <- nr_genes * 46.1712
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 46.1712){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov)
corr_Tfas <- rbind(corr_Tfas, corr_family_size)
}
colnames(corr_Tfas) <- c("og_id", "correction_factor", "corr_Tfas_count","old_Tfas_count",
"total_mean_cov", "expected_mean_cov")
comparison_siye_corr <- merge(corr_Tfas, corr_Tfas_per_gene, by = "og_id")
comparison_size_corr <- comparison_siye_corr[,c(1,4,3,7)]
colnames(comparison_size_corr) <- c("og_id", "uncorrected_count", "correction_per_OG", "correction_per_GENE")
library(reshape2)
comp_m <- melt(comparison_size_corr, variable.name = "og_id")
View(comp_m)
comp_m <- melt(comparison_size_corr, id.vars = "og_id")
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
warnings()
comp_m$variable <- as.factor(comp_m$variable)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
summary(comp_m)
comp_m$variable <- as.factor(comp_m$variable)
summary(comp_m)
class(comp_m$variable)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
comp_m$variable
str(comp_m$variable)
comp_m <- melt(comparison_size_corr, id.vars = "og_id")
uniq(comp_m$variable)
unique(comp_m$variable)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
comp_m <- comp_m[,c(2,3)]
summary(comp_m)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
str(comp_m)
comp_m$value <- as.integer(comp_m$value)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
comp_m <- melt(comparison_size_corr, id.vars = "og_id")
comp_m$variable <- as.factor(comp_m$variable)
comp_m$value <- as.integer(comp_m$value)
summary(comp_m)
class(comp_m$variable)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density()
ggplot(comp_m, aes(x=value, color=variable)) +
geom_density() +
xlim(0,25)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram() +
xlim(0,25)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_boxplot()
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram()
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram(fill = "white")
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity")
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1)
ggplot(comp_m, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1)+
xlim(0,25)
comparison_size_corr$diff_per_OG <- comparison_size_corr$uncorrected_count - comparison_size_corr$correction_per_OG
comparison_size_corr$diff_per_OG <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_OG)
comparison_size_corr$diff_per_GENE <- as.numeric(comparison_size_corr$uncorrected_count) - as.numeric(comparison_size_corr$correction_per_GENE)
diff_melt <- melt(comparison_size_corr(1,5,6), id.vars = "og_id")
diff_melt <- melt(comparison_size_corr[1,5,6], id.vars = "og_id")
View(diff_melt)
comparison_size_corr[1,5,6]
diff_melt <- melt(comparison_size_corr[, c(1,5,6)], id.vars = "og_id")
summary(diff_melt)
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1)+
increase <- corr_Tfas[as.integer(corr_Tfas$corr_Tfas_count) > as.integer(corr_Tfas$old_Tfas_count),]
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1)
ggplot(diff_melt, aes(x=value, color=variable)) +
geom_histogram(fill = "white", alpha=0.5, position="identity", binwidth = 1) +
xlim(-25,25)
comparison_size_corr$diff_approach <- comparison_size_corr$diff_per_OG - comparison_size_corr$correction_per_GENE
comparison_size_corr$diff_approach <- as.numeric(comparison_size_corr$diff_per_OG) - as.numeric(comparison_size_corr$correction_per_GENE)
comparison_size_corr$diff_approach <- as.numeric(abs(comparison_size_corr$diff_per_OG)) - as.numeric(abs(comparison_size_corr$correction_per_GENE))
abs(comparison_size_corr$diff_per_OG)
abs(comparison_size_corr$correction_per_GENE)
comparison_size_corr$diff_approach <- as.numeric(abs(comparison_size_corr$diff_per_OG)) - abs(as.numeric(comparison_size_corr$correction_per_GENE))
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_density()
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_histogram(binwidth=5)
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_histogram(binwidth=1)
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_boxplot()
mean(comparison_size_corr$diff_approach)
comparison_size_corr$diff_approach <- as.numeric(abs(comparison_size_corr$diff_per_OG)) - abs(as.numeric(comparison_size_corr$diff_per_GENE))
mean(comparison_size_corr$diff_approach) # -1.54
ggplot(comparison_size_corr, aes(x=diff_approach)) +
geom_boxplot()
table(comparison_size_corr$diff_approach)
nrow(corr_Tfas_no_mito[,(corr_Tfas_no_mito$total_mean_cov > corr_Tfas_no_mito$Lower_thresh) & (corr_Tfas_no_mito$total_mean_cov < corr_Tfas_no_mito$Upper_thresh)])
nrow(corr_Tfas_no_mito[(corr_Tfas_no_mito$total_mean_cov > corr_Tfas_no_mito$Lower_thresh) & (corr_Tfas_no_mito$total_mean_cov < corr_Tfas_no_mito$Upper_thresh),])
nrow(corr_Tfas[corr_Tfas$corr_Tfas_count == corr_Tfas$old_Tfas_count,])
nrow(corr_Tfas_no_mito[corr_Tfas_no_mito$corr_Tfas_count == corr_Tfas_no_mito$old_Tfas_count,])
within_thresh <- corr_Tfas_no_mito[corr_Tfas_no_mito$corr_Tfas_count == corr_Tfas_no_mito$old_Tfas_count,]
View(within_thresh)
# Correction accounting for variability
lower_thresh=34.5079# 25th quantile of the average coverage of ancestral single copy genes to account for variation
upper_thresh=43.6752 # 75th quantile of the average coverage of ancestral single copy genes
corr_Tfas_no_mito <- data.frame()
for (i in unique(tfas_no_mito_multicopy_genes$og_id)){
orthogroup <- tfas_no_mito_multicopy_genes[tfas_no_mito_multicopy_genes$og_id == i,]
nr_genes <- as.integer(orthogroup[1,6])
total_mean_cov <- sum(orthogroup$mean_cov)
lower_thresh_total <- nr_genes * lower_thresh
upper_thresh_total <- nr_genes * upper_thresh
expected_mean_cov <- nr_genes * 42.9189
correction_factor <- total_mean_cov/expected_mean_cov
new_size = round((nr_genes * correction_factor), digits = 0)
if (lower_thresh_total < total_mean_cov && total_mean_cov < upper_thresh_total){
new_size = nr_genes
}
#if (correction_factor > 1){
#  new_size = nr_genes
#}
if (total_mean_cov < 42.9189){
new_size = 1
}
corr_family_size <- cbind(i, as.numeric(correction_factor), as.integer(new_size),
as.integer(nr_genes), as.numeric(total_mean_cov), expected_mean_cov,
lower_thresh_total,upper_thresh_total)
corr_Tfas_no_mito <- rbind(corr_Tfas_no_mito, corr_family_size)
}
colnames(corr_Tfas_no_mito) <- c("og_id", "correction_factor", "corr_Tfas_count_PO","old_Tfas_count_PO", "total_mean_cov", "expected_mean_cov", "Lower_thresh", "Upper_thresh")
nrow(corr_Tfas_no_mito[corr_Tfas_no_mito$corr_Tfas_count == corr_Tfas_no_mito$old_Tfas_count,])
nrow(corr_Tfas[corr_Tfas$corr_Tfas_count == corr_Tfas$old_Tfas_count,])
within_thresh <- corr_Tfas_no_mito[corr_Tfas_no_mito$corr_Tfas_count == corr_Tfas_no_mito$old_Tfas_count,]
og_changed <- corr_Tfas[corr_Tfas$corr_Tfas_count == corr_Tfas$old_Tfas_count,1]
within_thresh[within_thresh$og_id != og_changed,]
missing <- within_thresh[within_thresh$og_id != og_changed,]
View(missing)
missing <- subset(within_thresh, !(og_changed))
og_changed <- as.data.frame(corr_Tfas[corr_Tfas$corr_Tfas_count == corr_Tfas$old_Tfas_count,1])
View(og_changed)
colnames(og_changed) <- c("og_changed")
missing <- subset(within_thresh, !(og_id %in% og_changed$og_changed))
View(missing)
og_id %in% og_changed$og_changed
intersect(within_thresh$og_id, og_changed)
intersect(within_thresh$og_id, og_changed$og_changed)
nrow(intersect(within_thresh$og_id, og_changed$og_changed))
count(intersect(within_thresh$og_id, og_changed$og_changed))
shard <- (intersect(within_thresh$og_id, og_changed$og_changed))
View(corr_Tfas_no_mito)
