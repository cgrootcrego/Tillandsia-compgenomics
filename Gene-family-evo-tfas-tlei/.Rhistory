r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
dup_genes <- read.table("dup_genes_larger_in_Tfas.txt")
setwd("Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
dup_genes <- read.table("dup_genes_larger_in_Tfas.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
library(ggplot2)
library(topGO)
geneID2GO <- readMappings(file = "genes_to_GO.map")
GO2geneID <- inverseList(geneID2GO)
geneNames <- names(geneID2GO)
e
e
dup_genes <- read.table("dup_genes_larger_in_Tfas.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
str(geneList)
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch")
table = as.factor(geneNames) %in% dup_genes$V1
int_table = as.integer(table)
int_fac_table = factor(int_table)
fac_table = rename(table = int_fac_table, geneNames = geneNames)
change_names <- function(data, name_list){
colnames(data) <- name_list
return(data)
}
rename <- function(table, geneNames){
names(table) <- geneNames
return(table)
}
attach_enriched_go_genes <- function(enriched_go_with_my_genes){
enriched_go_with_my_genes.list = c()
for (i in 1:length(enriched_go_with_my_genes)){
enriched_go_with_my_genes.list = c(enriched_go_with_my_genes.list, enriched_go_with_my_genes[[i]])
}
return(enriched_go_with_my_genes.list)
}
fac_table = rename(table = int_fac_table, geneNames = geneNames)
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher")
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher")
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher")
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.BP2 = cbind(allRes.BP1,"BP")
allRes.BP = change_names(data = allRes.BP2, name_list = name_list)
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.MF2 = cbind(allRes.MF1,"MF")
allRes.MF = change_names(data = allRes.MF2, name_list = name_list)
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.MF = genesInTerm(GOdata.MF)
allGO.CC = genesInTerm(GOdata.CC)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  dup_genes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
View(dup_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
new_DF <- go.dataframe[rowSums(is.na(go.dataframe)) > 0,]
View(new_DF)
View(GOdata.MF)
View(allRes.MF)
go.dataframe[101,5] <- "1e-30"
go.dataframe[101,5]
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
View(dup_genes)
write.table(go.dataframe, file = "Enriched_GO_terms_multicopy_genes_larger-in-Tfas.txt")
dup_genes <- read.table("dup_genes_larger_in_Tlei.txt")
geneList <- factor(as.integer(geneNames %in% dup_genes$V1))
names(geneList) <- geneNames
str(geneList)
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch")
table = as.factor(geneNames) %in% dup_genes$V1
int_table = as.integer(table)
int_fac_table = factor(int_table)
fac_table = rename(table = int_fac_table, geneNames = geneNames)
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher")
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher")
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher")
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.BP2 = cbind(allRes.BP1,"BP")
allRes.BP = change_names(data = allRes.BP2, name_list = name_list)
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.MF2 = cbind(allRes.MF1,"MF")
allRes.MF = change_names(data = allRes.MF2, name_list = name_list)
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.MF = genesInTerm(GOdata.MF)
allGO.CC = genesInTerm(GOdata.CC)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  dup_genes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
new_DF <- go.dataframe[rowSums(is.na(go.dataframe)) > 0,]
write.table(go.dataframe, file = "Enriched_GO_terms_multicopy_genes_larger-in-Tlei.txt")
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = "\t")
View(per_gene)
View(enriched_go_with_my_genes)
View(SAM_ANOTATION)
View(dup_genes)
for (element in enriched_go_with_my_genes.list){
print(element)
}
for (element in enriched_go_with_my_genes.list){
for (i in element){
print(i)
}
}
for (element in enriched_go_with_my_genes){
for (i in element){
print(i)
}
}
enriched_go_with_my_genes
for (element in enriched_go_with_my_genes){
for (i in element){
print(i)
}
}
for (element in enriched_go_with_my_genes){
element <- as.vector(element)
print(element)
for (i in element){
}
}
print(i)
for (element in enriched_go_with_my_genes){
element <- as.vector(element)
print(element)
for (i in element){
print(i)
}
}
View(go.dataframe)
for (i in 1:nrow(go.dataframe)){
genes <- go.dataframe[i, 4]
genes_vec <- strsplit(genes, ", ")
}
View(genes_vec)
genes_vec <- as.vector(strsplit(genes, ", "))
View(genes_vec)
genes_vec <- str_split(genes, ", ")
library(stringr)
for (i in 1:nrow(go.dataframe)){
genes <- go.dataframe[i, 4]
genes_vec <- str_split(genes, ", ")
}
View(genes_vec)
genes_vec <- str_split_n(genes, ", ")
for (i in 1:nrow(go.dataframe)){
genes <- go.dataframe[i, 4]
genes_vec <- str_split_n(genes, ", ")
}
View(genes_vec)
genes <- str_split(go.dataframe[,4], ", ")
View(genes)
print(i)
for (i in genes){
print(i)
}
for (i in genes){
for (j in i){
orthog <- per_gene[per_gene$V1==j,7]
print(j)
print(orthog)
}
}
orthog.list <- vector(mode = "list", length = 300)
View(orthog.list)
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list <- list.append(orthog)
}
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list <- append(orthog)
}
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list <- append(orthog)
}
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list[[l]] <- orthog
l = l+1
}
warnings()
View(orthog)
View(orthog.list)
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog <- c()
orthog.list[[l]] <- orthog
l = l+1
}
View(orthog.list)
warnings()
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list[[l]] <- orthog
l = l+1
orthog <- c()
}
View(orthog.list)
View(genes)
genes[[1]]
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = "\t")
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", header = F, sep = "\t")
View(per_gene)
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = '\t')
View(per_gene)
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", header = F)
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt", header = F)
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt", sep = "\t", header = F)
View(per_gene)
per_gene <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt",
sep = "\t", header = F)
View(per_gene)
per_gene <- read.delim("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch_noAcom.txt",
sep = "\t", header = F)
library(stringr)
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog.list[[l]] <- orthog
l = l+1
orthog <- c()
}
View(orthog.list)
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog <- unique(orthog)
orthog.list[[l]] <- orthog
l = l+1
orthog <- c()
}
View(orthog.list)
library(stringr)
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog <- unique(orthog)
orthog.list[[l]] <- orthog
l = l+1
orthog <- c()
}
View(orthog.list)
n
n
n
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
print(orthog)
orthog <- unique(orthog)
print(orthog)
orthog.list[[l]] <- orthog
l = l+1
orthog <- c()
}
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
orthog_uniq <- unique(orthog)
orthog.list[[l]] <- orthog_uniq
l = l+1
orthog <- c()
}
View(orthog_uniq)
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- c()
for (j in i){
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
}
class(orthog)
orthog_uniq <- unique(orthog)
orthog.list[[l]] <- orthog_uniq
l = l+1
orthog <- c()
}
class(orthog)
orthog <- c()
class(orthog)
orthog <- cbind(orthog, per_gene[per_gene$V1==j,7])
class(orthog)
new <- as.character(per_gene[per_gene$V1==j,7])
orthog <- cbind(orthog, new)
class(orthog)
orthog <- vector()
class(orthog)
orthog <- cbind(orthog, new)
orthog <- c(orthog, new)
class(orthog)
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- vector()
for (j in i){
new <- as.character(per_gene[per_gene$V1==j,7])
orthog <- c(orthog, new)
}
class(orthog)
orthog_uniq <- unique(orthog)
orthog.list[[l]] <- orthog_uniq
l = l+1
orthog <- c()
}
View(orthog.list)
orthog_string <- paste(orthog_uniq, collapse = ', ')
genes <- str_split(go.dataframe[,4], ", ")
orthog.list <- vector(mode = "list", length = 300)
l = 1
for (i in genes){
orthog <- vector()
for (j in i){
new <- as.character(per_gene[per_gene$V1==j,7])
orthog <- c(orthog, new)
}
class(orthog)
orthog_uniq <- unique(orthog)
orthog_string <- paste(orthog_uniq, collapse = ', ')
orthog.list[[l]] <- orthog_string
l = l+1
orthog <- c()
}
View(orthog.list)
go.dataframe <- cbind(go.dataframe, orthog.list)
View(go.dataframe)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
go.dataframe[101,5] <- "1e-30"
go.dataframe$adj_pval <- as.numeric(go.dataframe$adj_pval)
go.dataframe <- rbind(go.dataframe, orthog.list)
View(go.dataframe)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
as.data.frame(orthog.list)
x = as.data.frame(orthog.list)
View(x)
go.dataframe2 <- cbind(go.dataframe, as.vector(orthog.list))
View(go.dataframe2)
as.vector(orthog.list)
go.dataframe2 = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Orthogroups" = as.vector(orthog.list)
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
go.dataframe2 = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term,
"Orthogroups" = as.vector(orthog.list),
"Genes" = as.vector(enriched_go_with_my_genes.list),
"adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
View(go.dataframe2)
