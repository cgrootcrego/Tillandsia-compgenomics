# Create color palette for links
nb.cols <- 25
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(nb.cols)
for (j in 1:25){
loc=paste0("Tfas_chr", j)
genes <- synteny_genes[synteny_genes$Tfas_chrom == loc,]
for (i in 1:nrow(genes)){
circos.link(sector.index1=genes[i,3], genes[i,4], sector.index2=genes[i,7], genes[i,8],col=mycolors[j], lwd = .1)
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=4,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,col="darkgreen",cex=0.5, facing = "inside")
}
}
}
# Add species lines
draw.sector(91, 290, rou1 = 1.07, rou2 = 1.08, col = "olivedrab", border="NA")
draw.sector(288, 93, rou1 = 1.07, rou2 = 1.08, col = "darkgreen", border="NA")
circos.text(chrom$size/2, 8, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=0.9, facing = "bending.inside")
circos.text(chrom$size/2, 8, "T. leiboldiana", sector.index="Tlei_chr11",col="darkgreen",cex=0.9, facing = "bending.inside")
#-------------------TRACK 1: GENE DENSITY-------------------#
## Read in gene content files
# All gene counts
gene_counts_per_mb_windows <- read.table("Gene_counts_per_1MB_windows.Tfas-Tlei.mainScaffolds.curatedOGs.txt", header = T)
gene_counts_per_mb_windows <- read.table(args[[2]], header = T)
circos.track(gene_counts_per_mb_windows$chrom, y = gene_counts_per_mb_windows$gene_counts, x = gene_counts_per_mb_windows$start_window,
bg.col = "grey92", panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = "seagreen")
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = F, at = c(0,70,146),
labels.cex = 0.3, labels.col="khaki4", tick.length = 2)
}, track.height = 0.1, bg.border = "black")
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=3,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=2,points.overflow.warning=FALSE,
track.margin=c(0,0))
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=2,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,col="darkgreen",cex=0.5, facing = "inside")
}
}
}
# Add species lines
draw.sector(91, 290, rou1 = 1.07, rou2 = 1.08, col = "olivedrab", border="NA")
draw.sector(288, 93, rou1 = 1.07, rou2 = 1.08, col = "darkgreen", border="NA")
circos.text(chrom$size/2, 8, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=0.9, facing = "bending.inside")
circos.text(chrom$size/2, 8, "T. leiboldiana", sector.index="Tlei_chr11",col="darkgreen",cex=0.9, facing = "bending.inside")
## Read in gene content files
# All gene counts
gene_counts_per_mb_windows <- read.table("Gene_counts_per_1MB_windows.Tfas-Tlei.mainScaffolds.curatedOGs.txt", header = T)
gene_counts_per_mb_windows <- read.table(args[[2]], header = T)
circos.track(gene_counts_per_mb_windows$chrom, y = gene_counts_per_mb_windows$gene_counts, x = gene_counts_per_mb_windows$start_window,
bg.col = "grey92", panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = "seagreen")
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = F, at = c(0,70,146),
labels.cex = 0.3, labels.col="khaki4", tick.length = 2)
}, track.height = 0.15, bg.border = "black")
for(sn in get.all.sector.index()) {
set.current.cell(sector.index = sn, track.index = get.current.track.index())
breaks = seq(0, CELL_META$ylim[2], by = 50)
for(b in breaks) {
circos.lines(CELL_META$cell.xlim, rep(b, 2), lty = 3, col = "#00000040")
}
}
TE_content_per_mb_windows <- read.table("TE_content_Tfas-Tlei_per1MB-window_python.txt", header = T, sep = "\t")
circos.track(TE_content_per_mb_windows$chrom, x = TE_content_per_mb_windows$start_window,
y = TE_content_per_mb_windows$perc_te, bg.col = "grey92", ylim = c(0,100),
panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = "orange")
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = F, at = c(0,10,20),
labels.cex = 0.3, labels.col="khaki4", tick.length = 2)
}, track.height = 0.15, bg.border = "black")
for(sn in get.all.sector.index()) {
set.current.cell(sector.index = sn, track.index = get.current.track.index())
breaks = seq(0, CELL_META$ylim[2], by = 20)
for(b in breaks) {
circos.lines(CELL_META$cell.xlim, rep(b, 2), lty = 3, col = "#00000040")
}
}
#-------------------TRACK 3: SYNTENY-------------------#
### Add links from Tfas to Tlei
synteny_genes <- read.table("orthogroups_Tfas_Tlei_Acom.per_gene.with_functional_info.no_TEs.one-to-one.circlize.txt",
header = T,sep = "\t")
synteny_genes <- read.table(args[[3]], header = T,sep = "\t")
# Create color palette for links
nb.cols <- 25
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(nb.cols)
### Add links from Tfas to Tlei
for (j in 1:25){
loc=paste0("Tfas_chr", j)
genes <- synteny_genes[synteny_genes$Tfas_chrom == loc,]
for (i in 1:nrow(genes)){
circos.link(sector.index1=genes[i,3], genes[i,4], sector.index2=genes[i,7], genes[i,8],col=mycolors[j], lwd = .1)
}
}
?circos.text
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "bending.inside")
} else {
circos.text(chrom$size/3, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/3, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
}
}
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
}
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
}
}
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside")
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside")
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
}
}
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
}
}
# Make plot
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0.5))
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,0))
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,1))
} else {
circos.text(chrom$size/2.5, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,1))
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,1))
} else {
circos.text(chrom$size/2.5, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T, adj = c(0.5,1))
}
}
}
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1))
# Add chromosome names
is.even <- function(x) x %% 2 == 0
for (i in 1:nrow(chrom)){
is.even(i)
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size, 2.5, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.5, facing = "inside", niceFacing = T)
} else {
circos.text(chrom$size, 3, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.5, facing = "inside", niceFacing = T)
}
}
}
