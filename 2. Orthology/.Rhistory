# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/2. Orthology/")
### WITH NEW DATA FORMAT
data <- read.delim("checklist_curated_orthologs_Tfas-Tlei.new062022.txt", header = T, sep = "\t")
# Count number of genes in T. fasciculata with the same number of exons and the same
# length as the largest gene in the orthogroup
dim(data[data$diff_largest_exon_count == 0 &
startsWith(data$Gene_id, "Tfas"),]) # 19738 (75 %)
dim(data[data$diff_longest_CDS == 1 &
startsWith(data$Gene_id, "Tfas"),]) # 18416 (69.9 % %)
tfas_data <- data[startsWith(data$Gene_id, "Tfas"),]
dim(tfas_data[tfas_data$startcodon == "True" & tfas_data$stopcodon == "True",]) # 23,618 (89.7 % of all genes are complete)
View(data)
tlei_data <- data[startsWith(data$Gene_id, "Tlei"),]
dim(tfas_data[tfas_data$startcodon == "True" & tfas_data$stopcodon == "one_stopcodon",]) # 23,618 (89.7 % of all genes are complete)
dim(tfas_data[tfas_data$stopcodon == "multiple_stopcodon",]) # 23,618 (89.7 % of all genes are complete)
dim(tfas_data[tfas_data$stopcodon == "multiple_stopcodons",]) # 23,618 (89.7 % of all genes are complete)
dim(tfas_data[tfas_data$stopcodon == "no_stopcodon",]) # Only one gene has multiple stopcodons. It is a unique gene of T. fasciculata
dim(tfas_data[tfas_data$startcodon == "False",]) # 720 genes don't have a stopcodon
dim(tlei_data[tlei_data$stopcodon == "multiple_stopcodons",]) # Only one gene has multiple stopcodons. It is a unique gene of T. fasciculata
View(tlei_data)
dim(tlei_data[tlei_data$stopcodon == "no_stopcodon",]) # 720 genes don't have a stopcodon
dim(tlei_data[tlei_data$startcodon == "False",]) # 2318 genes don't have a startcodon
dim(tlei_data[tlei_data$startcodon == "False" & tlei_data$stopcodon == "no_stopcodon",]) # 14,924 (63,3 % of all genes are complete)
tlei_incomplete <- tlei_data[!(tlei_data$startcodon == "True" & tlei_data$stopcodon == "one_stopcodon"),]
View(tlei_incomplete)
dim(tlei_incomplete[tlei_incomplete$expressed_Tlei == 1,])
summary(tlei_incomplete)
tlei_incomplete$expressed_Tlei ,- as.numeric(tlei_incomplete$expressed_Tlei)
tlei_incomplete$expressed_Tlei <- as.numeric(tlei_incomplete$expressed_Tlei)
dim(tlei_incomplete[tlei_incomplete$expressed_Tlei == 1,])
counts_tlei <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/counts.Tfas_Tlei_6_timepoints.exons.ToTLEI.edited.txt",
header = T, sep = "\t")
View(counts_tlei)
counts_tlei[,2:72]==0
counts_tlei_nozero <- counts_tlei[sum(counts_tlei[,2:72]==0),]
View(counts_tlei_nozero)
sum(counts_tlei[,2:72]=!0)
!(sum(counts_tlei[,2:72]==0))
sum(counts_tlei[,2:72]==0)
sum(counts_tlei[,2:72])==0
counts_tlei[!(sum(counts_tlei[,2:72])==0),]
counts_tlei_nozero <- counts_tlei[!(sum(counts_tlei[,2:72])==0),]
sum(counts_tlei[,2:72])
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
counts_tlei_nozero <- counts_tlei %>%
filter(rowSums(across(where(is.numeric)))!=0)
View(counts_tlei_nozero)
summary(counts_tlei_nozero)
ggplot(data = counts_tlei_nozero, aes(x = Tfas_CAM_A_0100)) +
geom_density()
ggplot(data = counts_tlei_nozero, aes(x = Tfas_CAM_A_0100)) +
geom_density() + xlim(c(0,50000))
ggplot(data = counts_tlei_nozero, aes(x = Tfas_CAM_A_0100)) +
geom_density() + xlim(c(0,3000))
ggplot(data = counts_tlei_nozero, aes(x = Tfas_CAM_A_0100)) +
geom_density() + xlim(c(0,200))
library(edgeR)
groups_list <- data.table::transpose(str_split(colnames(counts_tlei), "_"))[c(1,3,4)]
groups_list <- data.table::transpose(str_split(colnames(counts_tlei), "_"))[c(1,3,4)]
library(stringr)
groups_list <- data.table::transpose(str_split(colnames(counts_tlei), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts_tlei, group=groups)
row.names(counts_tlei) <- counts_tlei[,1]
dyg<-DGEList(counts_tlei, group=groups)
counts <- counts_tlei[,-1]
View(counts)
dyg<-DGEList(counts, group=groups)
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd <- cpm(dyg, normalized.lib.sizes = T)
View(normd)
normd_trim <- normd[rowMeans(normd)>1,]
rowMeans(normd)
mean(rowMeans(normd))
x <- rowMeans(normd)
x <- as.data.frame(rowMeans(normd))
View(x)
ggplot(data = x, aes(x = rowMeans(normd))) +
geom_density()
ggplot(data = x, aes(x = rowMeans(normd))) +
geom_density() + xlim(c(0,20))
summary(x)
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/")
# For exonic-only analysis
counts <- read.table("counts.Tfas_Tlei_6_timepoints.exons.ToTLEI.edited.forR.sum.txt", header = T, row.names = 1)
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tlei/")
# For exonic-only analysis
counts <- read.table("counts.Tfas_Tlei_6_timepoints.exons.ToTLEI.edited.forR.sum.txt", header = T, row.names = 1)
#set up edgeR object
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd <- cpm(dyg, normalized.lib.sizes = T)
x <- as.data.frame(rowMeans(normd))
summary(x)
# Here we trim lowly-expressed genes. This doesn't change the results much but vastly shortens
# run time
normd_trim <- normd[rowMeans(normd)>1,]
View(normd_trim)
dim(normd)
dim(normd_trim)
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/2. Orthology/")
row.names(counts_tlei) <- counts_tlei[,1]
counts <- counts_tlei[,-1]
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd <- cpm(dyg, normalized.lib.sizes = T)
# I only count as expressed the exons that have a mean CPM > 0.6.
# I chose the median because that was a similar choice when filtering genes
normd_trim <- normd[rowMeans(normd)>0.6,]
dim(normd)
dim(normd_trim)
View(normd_trim)
row.names(normd_trim)
write.table(row.names(normd_trim), file = "Exons_to_keep.TLEI.txt",
quote = F)
write.table(row.names(normd_trim), file = "Exons_to_keep.TLEI.txt",
quote = F, row.names = F)
write.table(row.names(normd_trim), file = "Exons_to_keep.TLEI.txt",
quote = F, row.names = F, col.names = F)
write.table(normd_trim, file = "/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tlei/counts.Tfas_Tlei_6_timepoints.exons.toTLEI.normalized-cpm.trimmed.EdgeR.txt", sep = "\t", quote = F)
quantile(x$`rowMeans(normd)`,probs = c(.1))
View(x)
quantile(x,probs = c(.1))
quantile(x$`rowMeans(normd)`,probs = c(.1,.2,.5))
counts_tlei <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/counts.Tfas_Tlei_6_timepoints.exons.ToTLEI.edited.txt",
header = T, sep = "\t")
row.names(counts_tlei) <- counts_tlei[,1]
counts <- counts_tlei[,-1]
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd <- cpm(dyg, normalized.lib.sizes = T)
# Here I explore the distribution of mean CPM per exon
x <- as.data.frame(rowMeans(normd))
summary(x) # On average, an exon has 6 CPM, but the median is 0.6.
quantile(x$`rowMeans(normd)`,probs = c(.1,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.15,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.5,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.05,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.07,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.08,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.09,.2,.5))
quantile(x$`rowMeans(normd)`,probs = c(.1,.2,.5))
View(x)
View(x)
sum(x$`rowMeans(normd)` == 0)
quantile(x$`rowMeans(normd)`,probs = c(.15,.2,.5))
normd_Tfas <- normd[,c(1:36)]
View(normd_Tfas)
normd_Tlei <- normd[,c(37:72)]
# Here I explore the distribution of mean CPM per exon
x <- as.data.frame(rowMeans(normd_Tfas))
summary(x) # On average, an exon has 6 CPM, but the median is 0.6.
quantile(x$`rowMeans(normd)`,probs = c(.1,.2,.5))
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.2,.5))
y <- as.data.frame(rowMeans(normd_Tlei))
summary(y) # On average, an exon has 6 CPM, but the median is 0.6.
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.2,.5))
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.2,.5))
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.15,.5))
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.15,.5))
rowMeans(counts_tlei)
# I only count as expressed the exons that have a mean CPM > 0.6.
# I chose the median because that was a similar choice when filtering genes
write.table(normd, file = "/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tlei/counts.Tfas_Tlei_6_timepoints.exons.toTLEI.normalized-cpm.EdgeR.txt", sep = "\t", quote = F)
summary(counts_tlei_nozero)
counts_tfas <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tfas/counts.Tfas_Tlei_6_timepoints.exons.edited.txt,
", header = T, sep = "\t")
counts_tfas <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tfas/counts.Tfas_Tlei_6_timepoints.exons.edited.txt"
, header = T, sep = "\t")
row.names(counts_tfas) <- counts_tfas[,1]
counts <- counts_tfas[,-1]
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
View(counts)
counts_tfas <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tfas/counts.Tfas_Tlei_6_timepoints.exons."
, header = T, sep = "\t")
counts_tfas <- read.delim("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tfas/counts.Tfas_Tlei_6_timepoints.exons.edited.txt"
, header = T, sep = "\t")
row.names(counts_tfas) <- counts_tfas[,1]
counts <- counts_tfas[,-1]
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd <- cpm(dyg, normalized.lib.sizes = T)
normd_Tfas <- normd[,c(1:36)]
normd_Tlei <- normd[,c(37:72)]
# Here I explore the distribution of mean CPM per exon
x <- as.data.frame(rowMeans(normd_Tfas))
summary(x) # On average, an exon has 6 CPM, but the median is 0.6.
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.15,.5))
y <- as.data.frame(rowMeans(normd_Tlei))
summary(y) # On average, an exon has 6 CPM, but the median is 0.6.
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.15,.5))
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.12,.5))
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.13,.5))
quantile(y$`rowMeans(normd_Tlei)`,probs = c(.1,.14,.5))
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.15,.5))
quantile(x$`rowMeans(normd_Tfas)`,probs = c(.1,.12,.5))
View(normd)
# I only count as expressed the exons that have a mean CPM > 0.6.
# I chose the median because that was a similar choice when filtering genes
write.table(normd, file = "/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/mapped_to_Tlei/counts.Tfas_Tlei_6_timepoints.exons.toTFAS.normalized-cpm.EdgeR.txt",
sep = "\t", quote = F, )
