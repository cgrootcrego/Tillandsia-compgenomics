geom_jitter(data=Tlei_A, colour="gold2", position=position_jitter(0.2)) +
scale_x_discrete(labels=c("Bowtie2_Tfas", "BWAmem_Tfas", "Bowtie2_Tlei", "BWAmem_Tlei")) +
ylab(label = "Number of uniquely mapped reads") +
xlab(label = "") + theme(legend.position="none")
# Same but for multi mapped reads
stats <- read.csv("bio-info_phd/Mapping_trials_TC_data/mapping_trials_bowtie_vs_bwamem_multimap_rate.csv", header = T, sep = ";")
stats_m <-melt(stats, id.vars = c("sample"))
# Same but for multi mapped reads
stats <- read.csv("bio-info_phd/Mapping_trials_TC_data/mapping_trials_bowtie_vs_bwamem_multimap_rate.csv", header = T, sep = ";")
stats_m <-melt(stats, id.vars = c("sample"))
Tfas <- stats_m[stats_m$sample == "T.fasciculata_GY04_PA_unclear" | stats_m$sample == "T.fasciculata_GY092_CM",]
Tfas_A <- stats_m[stats_m$sample == "T.fasciculata_B1840",]
Tlei_A <- stats_m[stats_m$sample == "T.leiboldiana_B1842" | stats_m$sample == "T.leiboldiana_B323",]
Tlei <- stats_m[stats_m$sample == "T.leiboldiana_GY146_XC",]
ggplot(stats_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2), colour = "Black") +
geom_jitter(data=Tfas, colour="cadetblue2", position=position_jitter(0.2)) +
geom_jitter(data=Tfas_A, colour="dodgerblue", position=position_jitter(0.2)) +
geom_jitter(data=Tlei, colour="lightgoldenrod1", position=position_jitter(0.2)) +
geom_jitter(data=Tlei_A, colour="gold2", position=position_jitter(0.2)) +
scale_x_discrete(labels=c("Bowtie2_Tfas", "BWAmem_Tfas", "Bowtie2_Tlei", "BWAmem_Tlei")) +
ylab(label = "Number of uniquely mapped reads") +
xlab(label = "") + theme(legend.position="none")
# Same but for multi mapped reads
stats <- read.csv("bio-info_phd/Mapping_trials_TC_data/mapping_trials_bowtie_vs_bwamem_multimap_rate.csv", header = T, sep = ";")
stats_m <-melt(stats, id.vars = c("sample"))
Tfas <- stats_m[stats_m$sample == "T.fasciculata_GY04_PA_unclear" | stats_m$sample == "T.fasciculata_GY092_CM",]
Tfas_A <- stats_m[stats_m$sample == "T.fasciculata_B1840",]
Tlei_A <- stats_m[stats_m$sample == "T.leiboldiana_B1842" | stats_m$sample == "T.leiboldiana_B323",]
Tlei <- stats_m[stats_m$sample == "T.leiboldiana_GY146_XC",]
# Make violin plots of multi mapping rates
library(ggplot2)
ggplot(stats_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2), colour = "Black") +
geom_jitter(data=Tfas, colour="cadetblue2", position=position_jitter(0.2)) +
geom_jitter(data=Tfas_A, colour="dodgerblue", position=position_jitter(0.2)) +
geom_jitter(data=Tlei, colour="lightgoldenrod1", position=position_jitter(0.2)) +
geom_jitter(data=Tlei_A, colour="gold2", position=position_jitter(0.2)) +
scale_x_discrete(labels=c("Bowtie2_Tfas", "BWAmem_Tfas", "Bowtie2_Tlei", "BWAmem_Tlei")) +
ylab(label = "Number of uniquely mapped reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(stats_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_jitter(shape=16, position=position_jitter(0.2), colour = "Black") +
geom_jitter(data=Tfas, colour="cadetblue2", position=position_jitter(0.2)) +
geom_jitter(data=Tfas_A, colour="dodgerblue", position=position_jitter(0.2)) +
geom_jitter(data=Tlei, colour="lightgoldenrod1", position=position_jitter(0.2)) +
geom_jitter(data=Tlei_A, colour="gold2", position=position_jitter(0.2)) +
scale_x_discrete(labels=c("Bowtie2_Tfas", "BWAmem_Tfas", "Bowtie2_Tlei", "BWAmem_Tlei")) +
ylab(label = "Proportion of reads multimapped") +
xlab(label = "") + theme(legend.position="none")
# Are unique mapping rates correlated with the proportion of collapsed reads?
cortest <- read.csv("bio-info_phd/Mapping_trials_TC_data/uniqTlei_to_collapsed.csv", header = T, sep = ";")
View(cortest)
cor(cortest$uniq_mapping_rate,cortest$proportion_collapsed_reads)
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=proportion_collapsed_reads)) + geom_point()
# Are unique mapping rates correlated with the proportion of collapsed reads?
cortest <- read.csv("bio-info_phd/Mapping_trials_TC_data/uniqTlei_to_collapsed.csv", header = T, sep = ";")
cor(cortest$uniq_mapping_rate,cortest$retained.reads)
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=retained.reads)) + geom_point()
# Are unique mapping rates correlated with the proportion of collapsed reads?
cortest <- read.csv("bio-info_phd/Mapping_trials_TC_data/uniqTlei_to_collapsed.csv", header = T, sep = ";")
cor(cortest$uniq_mapping_rate,cortest$proportion_collapsed_reads)
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=proportion_collapsed_reads)) + geom_point()
cor(cortest$uniq_mapping_rate,cortest$retained.reads)
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=retained.reads)) + geom_point()
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=proportion_collapsed_reads)) +
geom_point() +
geom_smooth(method=lm)
ggplot(data = cortest, aes(x=uniq_mapping_rate, y=proportion_collapsed_reads)) +
geom_point() +
geom_smooth(method=lm) +
ylab(label = "Proportion of reads collapsed") +
xlab(label = "Unique mapping rate")
og <- read.table("bio-info_phd/orthology_Tfas_Tlei/orthogroups_Tfas_Tlei.txt", sep = "\t", header = F)
og <- matrix(unlist(read.table("bio-info_phd/orthology_Tfas_Tlei/orthogroups_Tfas_Tlei.txt",
sep = "\t", header = F, fill=T)),
ncol=max(count.fields(datafile, sep="")),byrow=F)
og <- matrix(unlist(read.table("bio-info_phd/orthology_Tfas_Tlei/orthogroups_Tfas_Tlei.txt",
sep = "\t", header = F, fill=T)),
ncol=max(count.fields("bio-info_phd/orthology_Tfas_Tlei/orthogroups_Tfas_Tlei.txt", sep="\t")),byrow=F)
head(og)
View(og)
library(reshape2)
og_melted <-melt(og, id.vars = c("V1"))
View(og_melted)
as.data.frame(og)
og <- as.data.frame(og)
View(og)
og_melted <-melt(og, id.vars = c("V1"))
View(og_melted)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt")
View(t)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
View(t)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$reads_total)
mean(t$surviving_MQ)
mean(t$mapping_rate)
mean(t$error_rate)
mean(t$duplication_per)
mean(t$reads_surviving_MQ_p)
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
colnames(map_rates) <- c("sample", "map_rate")
# Now this dataset has to be transposed to make the violin plot
library(reshape2)
map_rates_m <-melt(map_rates, id.vars = c("sample"))
View(map_rates_m)
View(map_rates)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates_m[map_rates_m$sample == "T.leiboldiana_B1842" | map_rates_m$sample == "T.leiboldiana_B323",]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates_m[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
rep(c(1),208)
map_rates$whatver <- rep(c(1),208)
ggplot(map_rates, aes(x= whatver, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate", "whatever")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd("Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.with_functional_info.no_TEs.size_corrections.no_plastid-mito-ribo.blastandsearch.txt", sep = '\t')
# Filter out unique orthogroups
counts_Tfas_Tlei <- counts[counts$Tfas != 0 & counts$Tlei != 0,]
colnames(counts) <- c("og_id", "Acom", "Tfas", "Tlei")
# Filter out unique orthogroups
counts_Tfas_Tlei <- counts[counts$Tfas != 0 & counts$Tlei != 0,]
# Add colour gradient to show number of datapoints with the same count combination
counts_Tfas_Tlei_multi <- counts_Tfas_Tlei[!(counts_Tfas_Tlei$Tfas == 1 & counts_Tfas_Tlei$Tlei == 1),]
### Log-ratio test
counts_Tfas_Tlei$logratio <- log(counts_Tfas_Tlei$Tfas/counts_Tfas_Tlei$Tlei)
mean_logratio <- mean(counts_Tfas_Tlei$logratio) # 0.0203
counts_Tfas_Tlei$corr_logratio <- counts_Tfas_Tlei$logratio - mean_logratio
ggplot(counts_Tfas_Tlei, aes(x=corr_logratio)) + geom_density()
library(ggplot2)
ggplot(counts_Tfas_Tlei, aes(x=corr_logratio)) + geom_density()
quantile(counts_Tfas_Tlei$corr_logratio)
top2percent_Tfas_larger <- counts_Tfas_Tlei %>%
arrange(desc(corr_logratio)) %>%
filter(corr_logratio >= quantile(corr_logratio, .98))
top2percent_Tlei_larger <- counts_Tfas_Tlei %>%
arrange((corr_logratio)) %>%
filter(corr_logratio <= quantile(corr_logratio, .02))
library(dplyr)
top2percent_Tfas_larger <- counts_Tfas_Tlei %>%
arrange(desc(corr_logratio)) %>%
filter(corr_logratio >= quantile(corr_logratio, .98))
top2percent_Tlei_larger <- counts_Tfas_Tlei %>%
arrange((corr_logratio)) %>%
filter(corr_logratio <= quantile(corr_logratio, .02))
View(top2percent_Tfas_larger)
