map_rates <- cbind(t[,c(1,12)])
colnames(map_rates) <- c("sample", "map_rate")
# Now this dataset has to be transposed to make the violin plot
library(reshape2)
map_rates_m <-melt(map_rates, id.vars = c("sample"))
View(map_rates_m)
View(map_rates)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates_m[map_rates_m$sample == "T.leiboldiana_B1842" | map_rates_m$sample == "T.leiboldiana_B323",]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates_m[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
rep(c(1),208)
map_rates$whatver <- rep(c(1),208)
ggplot(map_rates, aes(x= whatver, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate", "whatever")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/4. Gene_TE_content/")
library(ggplot2)
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)
library(rstatix)
# Read data
tfas <- read.delim("Tillandsia_fasciculata.perscaff.genic_and_TE_content.txt", header = T,
sep = "\t")
tlei <- read.delim("Tillandsia_leiboldiana.perscaff.genic_and_TE_content.txt", header = T,
sep = "\t")
View(tfas)
tfas$repetitive_content <- (tfas$repetitive_content)*0.01
tfas$repetitive_bases <- tfas$total_length * tfas$repetitive_content
tfas$ratio <- tfas$total_exonic_length / tfas$repetitive_bases
tfas$ratio2 <- tfas$repetitive_bases / tfas$total_exonic_length
tlei$repetitive_content <- (tlei$repetitive_content)*0.01
tlei$repetitive_bases <- tlei$total_length * tlei$repetitive_content
tlei$ratio <- tlei$total_exonic_length / tlei$repetitive_bases
tlei$ratio2 <- tlei$repetitive_bases / tlei$total_exonic_length
ratios <- as.data.frame(cbind(c(tfas$Scaffold, tlei$Scaffold),
c(tfas$ratio2, tlei$ratio2),
c(rep("T.fasciculata", 25), rep("T.leiboldiana", 26))))
ratios$rep_to_exon_ratio <- as.numeric(ratios$rep_to_exon_ratio)
colnames(ratios) <- c("scaff", "rep_to_exon_ratio", "species")
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
ggplot(ratios, aes(x = rep_to_exon_ratio, color = species)) + geom_histogram(binwidth = 1)
View(ratios)
summary(ratios)
ratios$rep_to_exon_ratio <- as.numeric(ratios$rep_to_exon_ratio)
summary(ratios)
ggplot(ratios, aes(x = species,y = rep_to_exon_ratio)) + geom_boxplot()
View(ratios)
View(ratios)
View(tlei)
write.table(tlei, "Tlei_exonic-to-repetitive_content_perscaff.txt", quote = F, sep = "\t")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/3b. Chromosome 14 Tlei/')
ratio <- read.table("Tlei_exonic-to-repetitive_content_perscaff.txt", sep = "\t", header = T)
View(ratio)
ggplot(ratio, aes(x=Scaffold, y=total_exonic_length)) + geom_point()
data <- read.table("Tlei_exonic-to-repetitive_content_perscaff.txt", sep = "\t", header = T)
data$Scaffold <- factor(data$Scaffold, levels=mixedsort(unique(data$Scaffold)))
pacman::p_load("ggplot2", "dplyr")
data$Scaffold <- factor(data$Scaffold, levels=mixedsort(unique(data$Scaffold)))
pacman::p_load("ggplot2", "dplyr", "gtools")
data$Scaffold <- factor(data$Scaffold, levels=mixedsort(unique(data$Scaffold)))
ggplot(ratio, aes(x=Scaffold, y=total_exonic_length)) + geom_point()
View(data)
summary(data)
class(data$Scaffold)
mixedsort(unique(data$Scaffold)
)
data$Scaffold
ggplot(data, aes(x=Scaffold, y=total_exonic_length)) + geom_point()
ggplot(data, aes(x=Scaffold, y=proportion_exonic)) + geom_point()
ggplot(data, aes(x=Scaffold, y=ratio2)) + geom_point()
View(data)
degenes <- read.table("orthogroup-info_Significant_Genes-Tfas-vs-Tlei_0.7-trimmed_TLEI-REF.size-corrected.noplastid-mito_EXONIC_withTlei-orthologs.txt",
header = F, sep = "\t")
View(degenes)
degenes <- read.delim("orthogroup-info_Significant_Genes-Tfas-vs-Tlei_0.7-trimmed_TLEI-REF.size-corrected.noplastid-mito_EXONIC_withTlei-orthologs.txt",
header = F, sep = "\t")
View(degenes)
degenes <- degenes[startsWith(degenes$V1,"Tlei"),]
degenes <- degenes[,c(1,2)]
table(degenes$V2)
freq <- table(degenes$V2)
freq <- as.vector(table(degenes$V2))
freq <- as.matrix(table(degenes$V2))
View(freq)
degenes$V1 <- factor(degenes$V1, levels=mixedsort(unique(degenes$V1)))
freq <- as.matrix(table(degenes$V2))
View(freq)
freq <- as.data.frame(table(degenes$V2))
View(freq)
freq$Var1 <- factor(freq$Var1, levels=mixedsort(unique(freq$Var1)))
freq$Var1
mixedsort(unique(freq$Var1))
colnames(freq) <- c("Scaffold", "DE_count")
merge(data, freq, by="Scaffold")
degenes <- read.delim("orthogroup-info_Significant_Genes-Tfas-vs-Tlei_0.7-trimmed_TLEI-REF.size-corrected.noplastid-mito_EXONIC_withTlei-orthologs.TLEI-ONLY.txt",
header = F, sep = "\t")
degenes <- degenes[,c(1,2)]
freq <- as.data.frame(table(degenes$V2))
freq$Var1 <- factor(freq$Var1, levels=mixedsort(unique(freq$Var1)))
colnames(freq) <- c("Scaffold", "DE_count")
merge(data, freq, by="Scaffold")
data <- merge(data, freq, by="Scaffold")
read.table("orthogroup_info_for_GOterm_enrichment.txt", header = F, sep = "\t")
allgenes <- read.delim("orthogroup_info_for_GOterm_enrichment.txt", header = F, sep = "\t")
View(allgenes)
allgenes <- allgenes[startsWith(allgenes$V1,"Tlei"),]
allgenes <- allgenes[,c(1,2)]
freq2 <- as.data.frame(table(allgenes$V2))
View(freq2)
colnames(freq2) <- c("Scaffold", "all_genecount")
data <- merge(data, freq2, by="Scaffold")
View(data)
allgenes <- read.delim("orthogroup_info_for_GOterm_enrichment.txt", header = F, sep = "\t")
allgenes <- allgenes[startsWith(allgenes$V1,"Tlei"),]
allgenes <- allgenes[,c(1,2)]
freq2 <- as.data.frame(table(allgenes$V2))
colnames(freq2) <- c("Scaffold", "all_genecount")
data <- merge(data, freq2, by="Scaffold")
allgenes <- read.delim("orthogroup_info_ALLGENES_Tlei.txt", header = F, sep = "\t")
allgenes <- allgenes[startsWith(allgenes$V1,"Tlei"),]
allgenes <- allgenes[,c(1,2)]
freq2 <- as.data.frame(table(allgenes$V2))
colnames(freq2) <- c("Scaffold", "all_genecount")
data <- merge(data, freq2, by="Scaffold")
data <- read.table("Tlei_exonic-to-repetitive_content_perscaff.txt", sep = "\t", header = T)
data$Scaffold <- factor(data$Scaffold, levels=mixedsort(unique(data$Scaffold)))
degenes <- read.delim("orthogroup_info_DEGENES_orthologs_Tlei.txt",
header = F, sep = "\t")
degenes <- degenes[startsWith(degenes$V1,"Tlei"),]
degenes <- degenes[,c(1,2)]
freq <- as.data.frame(table(degenes$V2))
freq$Var1 <- factor(freq$Var1, levels=mixedsort(unique(freq$Var1)))
colnames(freq) <- c("Scaffold", "DE_count")
data <- merge(data, freq, by="Scaffold")
allgenes <- read.delim("orthogroup_info_ALLGENES_Tlei.txt", header = F, sep = "\t")
allgenes <- allgenes[startsWith(allgenes$V1,"Tlei"),]
allgenes <- allgenes[,c(1,2)]
freq2 <- as.data.frame(table(allgenes$V2))
colnames(freq2) <- c("Scaffold", "all_genecount")
data <- merge(data, freq2, by="Scaffold")
data$proportion_degenes <- data$DE_count/data$all_genecount
ggplot(data, aes(x=Scaffold, y=proportion_degenes)) + geom_point()
ggplot(data, aes(x=Scaffold, y=DE_genes)) + geom_point()
ggplot(data, aes(x=Scaffold, y=DE_count)) + geom_point()
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/")
dat <- load("maSigPro_data_run_Tfas-vs-Tlei_0.7-trimmed_TLEI-REF.exonic.RData")
underexpressedTlei <- coefficients[coefficients > 0] # 268 genes
# Get expressional direction
coefficients <- sigs[["sig.genes"]][["TfasvsTlei"]][["coefficients"]][["betatimexTfas"]]
underexpressedTlei <- coefficients[coefficients > 0] # 268 genes
overexpressedTlei <- coefficients[coefficients < 0] # 236 genes
ggplot(data, aes(x=Scaffold, y=ratio2)) + geom_point()
underexpressedTlei
coefficients
View(sigs)
which(coefficients > 0)
sigs$summary$TfasvsTlei[which(coefficients > 0)]
genes_underexpressedTlei <- sigs$summary$TfasvsTlei[which(coefficients > 0)]
write.table(genes_underexpressedTlei, "Genelist_UnderExpressed_Tlei.EXONIC.txt")
write.table(genes_underexpressedTlei, "Genelist_UnderExpressed_Tlei.EXONIC.txt",
quote = F, row.names = F)
