ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
counts <- read.table("../counts.Tfas.6_timepoints.txt", header = T, row.names = 1) #important that these are the raw counts
library(edgeR)
library(maSigPro)
library(mclust)
library(stringr)
#set up edgeR object
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
#data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
counts_trim = trimDat("../counts.Tfas.6_timepoints.txt")
groups <- unlist(data.table::transpose(str_split(colnames(counts), "_"))[c(3)])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
plotMDS(normd, labels=groups) #lets you look for outliers and remove if necessary
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(Time=c(rep(c(1,2,3,4,5,6))),
Replicates=c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),
Tfas = c(rep(1, 36)))
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.6, vars = "groups")
sigs$summary
write.table(sigs$summary, file = "Genes_Significant_Tfas.txt", quote = F, sep = "\t", row.names = F)
see.genes(sigs$sig.genes$Tfas, show.fit = T, dis=d$dis,
cluster.method="Mclust", cluster.data = 1, k.mclust = T)
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/")
counts <- read.table("../counts.Tfas.6_timepoints.txt", header = T, row.names = 1) #important that these are the raw counts
library(edgeR)
library(maSigPro)
library(mclust)
library(stringr)
#set up edgeR object
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
#data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
counts_trim = trimDat("../counts.Tfas.6_timepoints.txt")
groups <- unlist(data.table::transpose(str_split(colnames(counts), "_"))[c(3)])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
plotMDS(normd, labels=groups) #lets you look for outliers and remove if necessary
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(Time=c(rep(c(1,2,3,4,5,6))),
Replicates=c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),
Tfas = c(rep(1, 36)))
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.6, vars = "groups")
sigs$summary
write.table(sigs$summary, file = "Genes_Significant_Tfas.txt", quote = F, sep = "\t", row.names = F)
see.genes(sigs$sig.genes$Tfas, show.fit = T, dis=d$dis,
cluster.method="Mclust", cluster.data = 1, k.mclust = T)
summary(design)
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.7, vars = "groups")
sigs$summary
write.table(sigs$summary, file = "Genes_Significant0.6_Tfas.txt", quote = F, sep = "\t", row.names = F)
counts <- read.table("../counts.Tlei.6_timepoints.txt", header = T, row.names = 1) #important that these are the raw counts
library(edgeR)
library(maSigPro)
library(mclust)
library(stringr)
#set up edgeR object
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
#data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
counts_trim = trimDat("../counts.Tfas.6_timepoints.txt")
groups <- unlist(data.table::transpose(str_split(colnames(counts), "_"))[c(3)])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
plotMDS(normd, labels=groups) #lets you look for outliers and remove if necessary
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(Time=c(rep(c(1,2,3,4,5,6))),
Replicates=c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),
Tfas = c(rep(1, 36)))
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.7, vars = "groups")
sigs$summary
write.table(sigs$summary, file = "Genes_Significant0.6_Tfas.txt", quote = F, sep = "\t", row.names = F)
see.genes(sigs$sig.genes$Tfas, show.fit = T, dis=d$dis,
cluster.method="Mclust", cluster.data = 1, k.mclust = T)
counts_trim = trimDat("../counts.Tlei.6_timepoints.txt")
groups <- unlist(data.table::transpose(str_split(colnames(counts), "_"))[c(3)])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
plotMDS(normd, labels=groups) #lets you look for outliers and remove if necessary
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(Time=c(rep(c(1,2,3,4,5,6))),
Replicates=c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),
Tfas = c(rep(1, 36)))
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.7, vars = "groups")
sigs$summary
write.table(sigs$summary, file = "Genes_Significant0.7_Tlei.txt", quote = F, sep = "\t", row.names = F)
see.genes(sigs$sig.genes$Tfas, show.fit = T, dis=d$dis,
cluster.method="Mclust", cluster.data = 1, k.mclust = T)
write.table(sigs$summary, file = "Genes_Significant0.7_Tlei.txt", quote = F, sep = "\t", row.names = F)
write.table(sigs$summary, file = "Genes_Significant_Tlei0.7.txt", quote = F, sep = "\t", row.names = F)
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
counts_trim = trimDat("../counts.Tfas_Tlei_6_timepoints.txt")
#set up edgeR object
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts_trim, group=groups)
#set up edgeR object
groups_list <- data.table::transpose(str_split(colnames(counts), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
#set up edgeR object
groups_list <- data.table::transpose(str_split(colnames(counts_trim), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
plotMDS(normd, labels=groups) #lets you look for outliers and remove if necessary
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(time=c(rep(c(1,2,3,4,5,6))),
sample=c(rep(c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),2)),
Tfas = c(rep(1, 36), rep(0,36)),
Tlei = c(rep(0, 36), rep(1,36))
)
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
View(normd)
View(d)
d<-make.design.matrix(design, degree=5)
View(design)
View(normd)
View(normd)
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
#load data and libraries
setwd("/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Co-expression_networks_MaSigPro/")
library(edgeR)
library(maSigPro)
library(Mfuzz)
library(mclust)
library(stringr)
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,6:]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
D
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,-c(1:5)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
counts_trim = trimDat("../counts.Tfas_Tlei_6_timepoints.txt")
View(counts_trim)
#set up edgeR object
groups_list <- data.table::transpose(str_split(colnames(counts_trim), "_"))[c(1,3,4)]
groups <- paste0(groups_list[[1]], "_", groups_list[[2]], "_", groups_list[[3]])
dyg<-DGEList(counts_trim, group=groups)
dyg<-calcNormFactors(dyg, method="TMM")
normd<-cpm(dyg, normalize.lib.sizes=TRUE)
##remove genes that have all zero read counts
normd<-normd[ rowSums(normd)!=0, ]
##load design object for masigpro. row order must be the same as the order of libraries in count matrix
design <- data.frame(time=c(rep(c(1,2,3,4,5,6))),
sample=c(rep(c(rep(1,6), rep(2,6), rep(3,6), rep(4,6),rep(5,6), rep(6,6)),2)),
Tfas = c(rep(1, 36), rep(0,36)),
Tlei = c(rep(0, 36), rep(1,36))
)
rownames(design) <- colnames(counts)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
View(normd)
View(design)
rownames(design) <- colnames(counts_trim)
design
d<-make.design.matrix(design, degree=5)
##using the negative binomial options in masigpro, calculate polynomial regressions for each gene
NBp<-p.vector(normd, d, counts=TRUE) #please choose dis. family with care. default for counts is neg. binomial
NBp$i # returns the number of significant genes
##TO REMOVE INFLUENTIAL GENES:
NBt<-T.fit(NBp)
influential<-NBt$influ.info
inf.genenames<-colnames(influential)
normd<-normd[!rownames(normd) %in% inf.genenames, ]
# Get significant genes
sigs <- get.siggenes(NBt, rsq = 0.7, vars = "groups")
sigs$summary
suma2Venn(sigs$summary[, c(1:2)])
suma2Venn(sigs$summary[, c(1:2)])
suma2Venn(sigs$summary[, c(1:2)])
see.genes(sigs$sig.genes$TleivsTfas, show.fit = T, dis=d$dis,
cluster.method="Mclust" ,cluster.data = 1, k.mclust = T)
write.table(sigs$summary$TleivsTfas, file = "Genes_Significant_Tfas-vs-Tlei_0.7pre-trimming.txt", quote = F, sep = "\t", row.names = F)
save(sigs, d, normd, NBp, NBt, file = "maSigPro_data_run_Tfas-vs-Tlei_0.7-pretrimming.RData")
