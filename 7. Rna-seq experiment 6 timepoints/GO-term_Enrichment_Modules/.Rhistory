ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/GO-term_Enrichment_Modules/")
overlap <- read.table("Overlap_genes_Tfas_Tlei_mods_unsigned8.txt", header = T)
View(overlap)
overlap$perc_Tfas <- overlap$overlap/overlap$count_Tfas
overlap$perc_Tlei <- overlap$overlap/overlap$count_Tlei
mean(overlap$count_Tfas)
mean(overlap$count_Tlei)
median(overlap$count_Tfas)
median(overlap$count_Tlei)
mean(overlap$overlap)
mean(overlap$perc_Tfas)
mean(overlap$perc_Tlei)
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/GO-term_Enrichment_Modules/')
library("ggplot2")
library("reshape2")
library("stringr")
counts_Tfas <- read.table("../counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
counts_Tlei <- read.table("../counts.Tlei.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
View(counts_Tfas)
counts_Tfas <- read.table("../counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
counts_Tfas <- read.table("../counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T, row.names = F)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
View(gene_Tfasc_v1.03128_PEPC_kinase)
gene_Tfasc_v1.03128_PEPC_kinase <- rbind(counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",])
counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
gene_Tfasc_v1.03128_PEPC_kinase <- rbind(gene_Tfasc_v1.03128_PEPC_kinase, counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",])
gene_Tfasc_v1.03128_PEPC_kinase
counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(mean_count)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(gene_Tfasc_v1.03128_PEPC_kinase)
gene_Tfasc_v1.03128_PEPC_kinase_mean <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(gene_Tfasc_v1.03128_PEPC_kinase)
View(gene_Tfasc_v1.03128_PEPC_kinase_mean)
colnames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)]))
rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])
sapply(seq(1, 6, 1)
)
seq(1, 6, 1)
View(gene_Tfasc_v1.03128_PEPC_kinase)
View(gene_Tfasc_v1.03128_PEPC_kinase_mean)
rownames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
rownames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_gene_Tfasc_v1.03128_PEPC_kinase <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
rownames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("counts_Tfas")
View(mean_gene_Tfasc_v1.03128_PEPC_kinase)
gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
mean_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(mean_Tlei)
rownames(mean_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_Tlei) <- c("counts_Tlei")
gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.leiboldiana"
mean_gene_Tfasc_v1.03128_PEPC_kinase <- rbind(mean_gene_Tfasc_v1.03128_PEPC_kinase, mean_Tlei)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_gene_Tfasc_v1.03128_PEPC_kinase <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
rownames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("counts")
gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
mean_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
rownames(mean_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_Tlei) <- c("counts")
gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.leiboldiana"
mean_gene_Tfasc_v1.03128_PEPC_kinase <- rbind(mean_gene_Tfasc_v1.03128_PEPC_kinase, mean_Tlei)
View(mean_gene_Tfasc_v1.03128_PEPC_kinase)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_gene_Tfasc_v1.03128_PEPC_kinase <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
rownames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("counts")
mean_gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
mean_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
rownames(mean_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_Tlei) <- c("counts")
mean_Tlei$species <- "T.leiboldiana"
mean_gene_Tfasc_v1.03128_PEPC_kinase <- rbind(mean_gene_Tfasc_v1.03128_PEPC_kinase, mean_Tlei)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_gene_Tfasc_v1.03128_PEPC_kinase <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_Tfasc_v1.03128_PEPC_kinase$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("counts")
mean_gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
mean_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_Tlei$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_Tlei) <- c("counts")
mean_Tlei$species <- "T.leiboldiana"
mean_gene_Tfasc_v1.03128_PEPC_kinase <- rbind(mean_gene_Tfasc_v1.03128_PEPC_kinase, mean_Tlei)
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tfas[rownames(counts_Tfas) == "Tfasc_v1.03128",]
mean_gene_Tfasc_v1.03128_PEPC_kinase <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_Tfasc_v1.03128_PEPC_kinase$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_Tfasc_v1.03128_PEPC_kinase) <- c("counts", "time")
mean_gene_Tfasc_v1.03128_PEPC_kinase$species <- "T.fasciculata"
gene_Tfasc_v1.03128_PEPC_kinase <- counts_Tlei[rownames(counts_Tlei) == "Tfasc_v1.03128",]
mean_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_Tfasc_v1.03128_PEPC_kinase[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_Tlei$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_Tlei) <- c("counts", "time")
mean_Tlei$species <- "T.leiboldiana"
mean_gene_Tfasc_v1.03128_PEPC_kinase <- rbind(mean_gene_Tfasc_v1.03128_PEPC_kinase, mean_Tlei)
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase), aes(x=time, y=count, group = species)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase), aes(x=time, y=count, group = species)) +
geom_point(color = "grey") +
geom_line(color = "grey")
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=count, group = species)) +
geom_point(color = "grey") +
geom_line(color = "grey")
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(color = "grey") +
geom_line(color = "grey")
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species))
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(color = species) +
geom_line(color = "grey")
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(color = species) +
geom_line(color = species)
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species))+
geom_line(aes(color = species))
gene_Tfasc_v1.03128_PEPC_kinase[, grep("1700", colnames(gene_Tfasc_v1.03128_PEPC_kinase))]
mean(gene_Tfasc_v1.03128_PEPC_kinase[, grep("1700", colnames(gene_Tfasc_v1.03128_PEPC_kinase))])
mean(as.vector(gene_Tfasc_v1.03128_PEPC_kinase[, grep("1700",
colnames(gene_Tfasc_v1.03128_PEPC_kinase))]))
summary(gene_Tfasc_v1.03128_PEPC_kinase)
v <- gene_Tfasc_v1.03128_PEPC_kinase[, grep("1700", colnames(gene_Tfasc_v1.03128_PEPC_kinase))]
View(v)
rowMeans(v)
gene = "Tfasc_v1.03128"
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species))+
geom_line(aes(color = species))+
main(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 7.5)
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 5)
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75)
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75) +
geom_vline(xintercept = 1.75) +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75) +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
ggplot(mean_gene_Tfasc_v1.03128_PEPC_kinase, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
counts_Tfas <- read.table("../counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
counts_Tlei <- read.table("../counts.Tlei.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
gene = "Tfasc_v1.09872"
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene,]
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tfas$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tfas) <- c("counts", "time")
mean_gene_expression_Tfas$species <- "T.fasciculata"
gene_expression_Tlei <- counts_Tlei[rownames(counts_Tlei) == gene,]
mean_gene_expression_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tlei$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tlei) <- c("counts", "time")
mean_gene_expression_Tlei$species <- "T.leiboldiana"
mean_gene_expression <- rbind(mean_gene_expression_Tfas, mean_gene_expression_Tlei)
View(mean_gene_Tfasc_v1.03128_PEPC_kinase)
ggplot(mean_gene_expression, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
gene = "Tfasc_v1.16311"
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene,]
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tfas$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tfas) <- c("counts", "time")
mean_gene_expression_Tfas$species <- "T.fasciculata"
gene_expression_Tlei <- counts_Tlei[rownames(counts_Tlei) == gene,]
mean_gene_expression_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tlei$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tlei) <- c("counts", "time")
mean_gene_expression_Tlei$species <- "T.leiboldiana"
mean_gene_expression <- rbind(mean_gene_expression_Tfas, mean_gene_expression_Tlei)
ggplot(mean_gene_expression, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: phosphoenolpyruvate carboxylase kinase"))
ggplot(mean_gene_expression, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: Phosphoenolpyruvate carboxylase"))
gene = "Tfasc_v1.09872"
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene,]
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tfas$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tfas) <- c("counts", "time")
mean_gene_expression_Tfas$species <- "T.fasciculata"
gene_expression_Tlei <- counts_Tlei[rownames(counts_Tlei) == gene,]
mean_gene_expression_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
mean_gene_expression_Tlei$time <- c("0100", "0500", "0900","1300", "1700", "2100")
colnames(mean_gene_expression_Tlei) <- c("counts", "time")
mean_gene_expression_Tlei$species <- "T.leiboldiana"
mean_gene_expression <- rbind(mean_gene_expression_Tfas, mean_gene_expression_Tlei)
ggplot(mean_gene_expression, aes(x=time, y=counts, group = species)) +
geom_point(aes(color = species)) +
geom_line(aes(color = species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle(paste("Expression curve for", gene, "- function: Phosphoenolpyruvate carboxylase"))
source('~/.active-rstudio-document')
