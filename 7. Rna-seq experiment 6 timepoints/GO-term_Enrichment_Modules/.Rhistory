lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=30, by=2))
# Call the network topology analysis function, I decided to choose a signed network
# signed network: direction of correlation is integrated (positive vs negative)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = "signed")
softpower_table <- sft[["fitIndices"]]
softpower_table$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
View(softpower_table)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softPower = 18;
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower, type = "signed")
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
source("~/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/Coexpression_analysis_signed.R")
# In this script, we make step-by-step coexpression networks following the WGCNA tutorials.
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
# Load input data
lnames = load(file = "coexpression_input_Tflei_vsd_10c4s.RData");
# Load input data
lnames = load(file = "coexpression_input_Tlei_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=30, by=2))
# Call the network topology analysis function, I decided to choose a signed network
# signed network: direction of correlation is integrated (positive vs negative)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = "signed")
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
softpower_table_Tlei <- sft[["fitIndices"]]
softpower_table_Tlei$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
View(softpower_table_Tlei)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
plot(geneTree2, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods3)
table(dynamicMods)
mean(table(dynamicMods))
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree3, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
table(dynamicColors)
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
dynamicColors
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "coexpression_network_Tfas_signed18_vsd_10c4s.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
lnames = load(file = "coexpression_input_Tlei_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=30, by=2))
# Call the network topology analysis function, I decided to choose a signed network
# signed network: direction of correlation is integrated (positive vs negative)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = "signed")
softpower_table_Tlei <- sft[["fitIndices"]]
softpower_table_Tlei$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
View(softpower_table_Tlei)
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softpower_table_Tlei <- sft[["fitIndices"]]
softpower_table_Tlei$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
softpower_table_Tlei <- sft[["fitIndices"]]
softpower_table_Tlei$SFT.R.sq <- format(softpower_table_Tlei$SFT.R.sq, scientific = F)
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=30, by=2))
# Call the network topology analysis function, I decided to choose a signed network
# signed network: direction of correlation is integrated (positive vs negative)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = "signed")
softpower_table_Tlei <- sft[["fitIndices"]]
softpower_table_Tlei$SFT.R.sq <- format(softpower_table_Tlei$SFT.R.sq, scientific = F)
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 18;
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower, type = "signed")
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
plot(geneTree2, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)
mean(table(dynamicMods))
# We end up with 114 modules, the largest one contains 1254 genes, the smallest
# contains 36 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree3, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree3, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "coexpression_network_Tlei_signed18_vsd_10c4s.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
View(module_corr)
write.table(module_corr, file = "Correlation_Modules_to_Traits_Tlei_signed18_vsd10c4s.txt", quote = F, sep = "\t")
modules_sign_time <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time$gene_count <- nr_genes_module[substring(rownames(modules_sign_time),3)]
modules_sign_time$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time),1]
modules_sign_time$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time),2]
View(modules_sign_time)
write.csv(modules_sign_time, file = "Modules_sign-Time_Tlei_soft18.txt", quote = F, sep = "\t")
write.table(modules_sign_time, file = "Modules_sign-Time_Tlei_soft18.txt", quote = F, sep = "\t")
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.3,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
write.table(geneInfo, file = "geneInfo_co-expression_Tlei_vsd_10c4s_signed18.csv", quote = F, sep = "\t")
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time2), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("GO-term_Enrichment_Modules/Genes-for-Enrichment_T.leiboldiana_signed18_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("GO-term_Enrichment_Modules/Genes-for-Enrichment_T.leiboldiana_signed18_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("GO-term_Enrichment_Modules/Genes-for-Enrichment_T.leiboldiana_signed18_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/GO-term_Enrichment_Modules/')
library("ggplot2")
library(matrixStats)
library(stringr)
counts_Tfas <- read.table("../counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
counts_Tlei <- read.table("../counts.Tlei.6_timepoints.filtr-normalized_DESEQ2.txt", header = T)
orthoinfo <- read.delim("../orthogroup_info_for_GOterm_enrichment.txt", sep = "\t", header = F)
gene = read.table("photorespiration_genes_unique_Tlei_signed18.txt")
View(gene)
gene = read.table("photorespiration_genes_unique_Tlei_signed18.txt", col.names = c("gene"))
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene,]
View(gene_expression_Tfas)
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene$gene,]
View(gene_expression_Tfas)
rownames(counts_Tfas) == gene$gene
gene$gene
gene_expression_Tfas <- counts_Tfas[rownames(counts_Tfas) == gene$gene,]
sum(rownames(counts_Tfas) == gene$gene)
gene_expression_Tfas <- subset(counts_Tfas, rownames(counts_Tfas) %in% gene)
View(gene_expression_Tfas)
gene_expression_Tfas <- subset(counts_Tfas, rownames(counts_Tfas) %in% gene$gene)
View(gene_expression_Tfas)
gene_expression_Tlei <- subset(counts_Tlei, rownames(counts_Tlei) %in% gene$gene)
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)]))                                           )
View(mean_gene_expression_Tfas)
#sd_gene_expression_Tfas <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tfas <- cbind(mean_gene_expression_Tfas, sd_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas) <- c("0100", "0500", "0900","1300", "1700", "2100")
library(reshape2)
mean_gene_expression_Tfas_m <- melt(mean_gene_expression_Tfas)
View(mean_gene_expression_Tfas_m)
colnames(mean_gene_expression_Tfas) <- c("Time", "Counts")
mean_gene_expression_Tfas$species <- "T.fasciculata"
colnames(mean_gene_expression_Tfas_m) <- c("Time", "Counts")
mean_gene_expression_Tfas_m$species <- "T.fasciculata"
gene = read.table("photorespiration_genes_unique_Tlei_signed18.txt", col.names = c("gene"))
gene_expression_Tfas <- subset(counts_Tfas, rownames(counts_Tfas) %in% gene$gene)
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)]))                                           )
#sd_gene_expression_Tfas <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tfas <- cbind(mean_gene_expression_Tfas, sd_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_gene_expression_Tfas_m <- melt(mean_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas_m) <- c("Time", "Counts")
mean_gene_expression_Tfas_m$Species <- "T.fasciculata"
gene = read.table("photorespiration_genes_unique_Tlei_signed18.txt", col.names = c("gene"))
gene_expression_Tfas <- subset(counts_Tfas, rownames(counts_Tfas) %in% gene$gene)
mean_gene_expression_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)]))                                           )
#sd_gene_expression_Tfas <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tfas <- cbind(mean_gene_expression_Tfas, sd_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_gene_expression_Tfas_m <- melt(mean_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas_m) <- c("Time", "Counts")
mean_gene_expression_Tfas_m$Species <- "T.fasciculata"
gene_expression_Tlei <- subset(counts_Tlei, rownames(counts_Tlei) %in% gene$gene)
mean_gene_expression_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#sd_gene_expression_Tlei <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tlei <- cbind(mean_gene_expression_Tlei, sd_gene_expression_Tlei)
colnames(mean_gene_expression_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_gene_expression_Tlei_m <- melt(mean_gene_expression_Tlei)
colnames(mean_gene_expression_Tlei_m) <- c("Time", "Counts")
mean_gene_expression_Tlei_m$Species <- "T.leiboldiana"
mean_gene_expression <- rbind(mean_gene_expression_Tfas_m, mean_gene_expression_Tlei_m)
View(mean_gene_expression)
View(gene_expression_Tfas)
View(gene_expression_Tlei)
#sd_gene_expression_Tfas <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tfas <- cbind(mean_gene_expression_Tfas, sd_gene_expression_Tfas)
mean_gene_expression_Tfas$Gene <- rownames(mean_gene_expression_Tfas)
mean_gene_expression_Tfas_m <- melt(mean_gene_expression_Tfas)
colnames(mean_gene_expression_Tfas_m) <- c("Gene","Time", "Counts")
mean_gene_expression_Tfas_m$Species <- "T.fasciculata"
gene_expression_Tlei <- subset(counts_Tlei, rownames(counts_Tlei) %in% gene$gene)
mean_gene_expression_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#sd_gene_expression_Tlei <- sapply(seq(1, 6, 1), function(j) rowSds(as.matrix(gene_expression_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
#mean_gene_expression_Tlei <- cbind(mean_gene_expression_Tlei, sd_gene_expression_Tlei)
colnames(mean_gene_expression_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_gene_expression_Tlei$Gene <- rownames(mean_gene_expression_Tlei)
mean_gene_expression_Tlei_m <- melt(mean_gene_expression_Tlei)
colnames(mean_gene_expression_Tlei_m) <- c("Gene", "Time", "Counts")
mean_gene_expression_Tlei_m$Species <- "T.leiboldiana"
View(mean_gene_expression_Tlei_m)
mean_gene_expression <- rbind(mean_gene_expression_Tfas_m, mean_gene_expression_Tlei_m)
View(mean_gene_expression)
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = Gene)) +
geom_point(aes(color = Species)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed") +
ggtitle()
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = Gene)) +
geom_point(aes(color = Species)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = Gene)) +
geom_point(aes()) +
geom_line(aes()) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = Species)) +
geom_point(aes(color = Species)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = interaction(Gene, Species))) +
geom_point(aes(color = Species)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
mean_gene_expression$Counts <- log(mean_gene_expression$Counts+1)
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = interaction(Gene, Species))) +
geom_point(aes(color = Species)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
ggplot(mean_gene_expression, aes(x=Time, y=Counts, group = interaction(Gene, Species))) +
geom_point(aes(color = Species, shape=Gene)) +
geom_line(aes(color = Species)) +
geom_vline(xintercept = 4.75, linetype = "dashed") +
geom_vline(xintercept = 1.75, linetype = "dashed")
