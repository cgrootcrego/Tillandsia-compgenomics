geom_point() +
geom_line() +
ylim(c(0,25000))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point() +
geom_line() +
ylim(c(0,5000))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point() +
geom_line()
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line()
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey")
mean_count_m[mean_count_m == "0100",]
View(mean_count)
mean(mean_count$`0100`
)
means <- cbind(c("0100", "0900", "1300", "1700", "2100"),
c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`)))
View(means)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
means <- as.data.frame(cbind(c("0100", "0900", "1300", "1700", "2100"),
c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`))))
View(means)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
means <- data.frame(time=(c("0100", "0900", "1300", "1700", "2100"),
counts = c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`))))
means <- data.frame(time=c("0100", "0900", "1300", "1700", "2100"),
counts = c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`)))
means <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
counts = c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`)))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
means <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
count = c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`)))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
lnames = load("coexpression_network_unsigned8_Tfas_vsd_10c4s.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
lnames
lnames = load("coexpression_input_Tfas_vsd_10c4s.RData")
lnames
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
#Gather some info on significant modules
modules_sign_time <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time$gene_count <- nr_genes_module[substring(rownames(modules_sign_time),3)]
modules_sign_time$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time),1]
modules_sign_time$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time),2]
library("WGCNA")
library("ggplot2")
library(reshape2)
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
#Gather some info on significant modules
modules_sign_time <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time$gene_count <- nr_genes_module[substring(rownames(modules_sign_time),3)]
modules_sign_time$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time),1]
modules_sign_time$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time),2]
# Now I want to focus just on time differences
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
# Now create a per-gene summary of the network, containing the module, the correlation of
# each trait to the time points (significance), the p-value of the significance, and the
# membership and o-value for each module, ranked by their significance for time.
# Create the starting data frame
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
write.table(geneInfo, file = "geneInfo_co-expression_Tfasc_vsd_10c4s_unsigned8.txt", quote = F, sep = "\t")
lnames = load("coexpression_input_Tfas_vsd_10c4s.RData")
lnames = load("coexpression_network_Tfas_signed18_vsd_10c4s.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
#Gather some info on significant modules
modules_sign_time2 <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time2) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time2$gene_count <- nr_genes_module[substring(rownames(modules_sign_time2),3)]
modules_sign_time2$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time2),1]
modules_sign_time2$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time2),2]
# Now I want to focus just on time differences
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
# Now create a per-gene summary of the network, containing the module, the correlation of
# each trait to the time points (significance), the p-value of the significance, and the
# membership and o-value for each module, ranked by their significance for time.
# Create the starting data frame
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
write.table(geneInfo, file = "geneInfo_co-expression_Tfasc_vsd_10c4s_signed18.csv", quote = F, sep = "\t")
geneInfo <- read.table("geneInfo_co-expression_Tfasc_vsd_10c4s_signed18.csv")
counts <- read.table("counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T, row.names = 1)
genes <- scan("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt", character(), quote = "")
geneInfo <- read.table("geneInfo_co-expression_Tfasc_vsd_10c4s_signed18.csv")
View(geneInfo)
membership <- subset(geneInfo, rownames(geneInfo) %in% genes)
module_counts<- subset(counts, rownames(counts) %in% genes)
module_geneInfo <- subset(geneInfo, rownames(geneInfo) %in% genes)
membership <- module_geneInfo$MM.lightcyan
membership <- c(rownames(module_geneInfo), module_geneInfo$MM.lightcyan)
membership <- cbind(rownames(module_geneInfo), module_geneInfo$MM.lightcyan)
View(membership)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
ylim(c(0,10000))
module_counts<- subset(counts, rownames(counts) %in% genes)
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_count$gene_id <- row.names(mean_count)
mean_count_m <- melt(mean_count, id.vars = "gene_id")
colnames(mean_count_m) <- c("gene_id", "time", "count")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
ylim(c(0,10000))
means <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
count = c(mean(mean_count$`0100`), mean(mean_count$`0500`),
mean(mean_count$`0900`), mean(mean_count$`1300`),
mean(mean_count$`1700`), mean(mean_count$`2100`)))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
ylim(c(0,10000))
membership <- cbind(rownames(module_geneInfo), module_geneInfo$MM.lightcyan)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership[,2])) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
ylim(c(0,10000))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership[,2])) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
membership[,2]
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership[,2])) +
geom_point(color="grey") +
geom_line(color="grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership[,2])) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
mean_count_m$membership <- membership[mean_count_m$gene_id,2]
membership[mean_count_m$gene_id,2]
mean_count_m$gene_id
membership <- as.data.frame(cbind(rownames(module_geneInfo), module_geneInfo$MM.lightcyan))
mean_count_m$membership <- membership[mean_count_m$gene_id,2]
View(mean_count_m)
membership[mean_count_m$gene_id,2]
membership[membership$V1 == mean_count_m$gene_id,2]
membership$V1 == mean_count_m$gene_id
membership <- as.data.frame(cbind(rep(rownames(module_geneInfo), each = 6), rep(module_geneInfo$MM.lightcyan, each = 6)))
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership[,2])) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership$V2)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_count$gene_id <- row.names(mean_count)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership$V2)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
membership$V2
mean_count_m <- melt(mean_count, id.vars = "gene_id")
colnames(mean_count_m) <- c("gene_id", "time", "count")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership$V2)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
membership$V2
summary(membership)
membership <- as.data.frame(cbind(rep(rownames(module_geneInfo), each = 6),
as.numeric(rep(module_geneInfo$MM.lightcyan, each = 6))))
summary(membership)
membership$V2 <- as.numeric(membership$V2)
summary(membership)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership$V2)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
View(module_geneInfo)
membership[membership$V1 == mean_count_m$gene_id,]
mean_count_m$gene_id
membership$V1
membership[membership$V1 == mean_count_m$gene_id,2]
membership$V1 == mean_count_m$gene_id
mean_count_m$gene_id
membership$V1
mean_count_m[mean_count_m$gene_id == membership$V1]
mean_count_m[mean_count_m$gene_id == membership$V1,1]
mean_count_m[gene_id,1]
mean_count_m[mean_count_m$gene_id,1
mean_count_m[mean_count_m$gene_id,1]
mean_count_m[mean_count_m$gene_id,1]
mm <- merge(mean_count_m, membership, by = "gene_id")
membership <- as.data.frame(cbind((rownames(module_geneInfo)),
(module_geneInfo$MM.lightcyan)))
colnames(membership) <- c("gene_id", "membership")
mm <- merge(mean_count_m, membership, by = "gene_id")
View(mm)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
View(mean_count_m)
View(mm)
membership <- merge(mean_count_m, membership, by = "gene_id")
mean_count_m <- merge(mean_count_m, membership, by = "gene_id")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
View(mm)
mean_count_m <- mm
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
summary(mean_count_m)
mean_count_m$membership <- as.numeric(mean_count_m$membership)
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red")
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id, color = membership)) +
geom_point() +
geom_line() +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
scale_color_gradient(low="blue", high="red") +
ylim(0,15000)
goterms <- read.table("GO-term_enrichment_signed18_mod-lightcyan.txt")
goterms <- read.table("GO-term_enrichment_signed18_mod-lightcyan.txt")
goterms <- read.table("GO-term_enrichment_signed18_mod-lightcyan.txt", sep = "\t")
View(goterms)
goterms <- read.table("GO-term_enrichment_signed18_mod-lightcyan.txt", sep = "\t", header = T)
grep("malate", goterms$Term)
malate <- goterms[grep("malate", goterms$Term), 6]
library("stringr")
str_split(malate, ", ")
unlist(str_split(malate, ", "))
malate <- unlist(str_split(malate, ", "))
# COlour in grey
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black")
malate_expr <- subset(mean_count_m, gene_id %in% malate)
View(malate_expr)
malate
# Highlight genes of interest
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
geom_line(data = malate_expr, aes(group = 1), size = 1.25, color = "black")
# Highlight genes of interest
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1.25, color = "black") +
geom_line(data = malate_expr, aes(group = gene_id), size = 1.25, color = "black")
# Highlight genes of interest
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr, aes(group = gene_id), size = 1.25, color = "black")
# Highlight genes of interest
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr, aes(group = gene_id), size = 1, color = "green")
# Highlight genes of interest
ggplot(mean_count_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr, aes(group = gene_id), size = 1, color = "darkgreen")
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library('DESeq2')
library("vsn")
library("gplots")
library("ggplot2")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("WGCNA")
# Read in counts and create metadata
counts <- read.delim('counts.Tlei.6_timepoints.txt', header = T, row.names = 1)
metadata <- data.frame(sample=c(rep(1,6), rep(2,6), rep(3,6),
rep(4,6),rep(5,6), rep(6,6)),
time=c(rep(c(1,2,3,4,5,6))))
metadata$sample <- as.factor(metadata$sample)
metadata$time <- as.factor(metadata$time)
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~time)
dds <- estimateSizeFactors(dds)
# save normalized counts
counts.norm <- counts(dds, normalized=TRUE)
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command keeps any gene that has more than 10 counts
# in more than 4 samples, meaning that every gene with more than 88 % of samples with an expression
# under 10 will be filtered out. In the second command, I reduce the count threshold to 5, which is
# less stringent. In the third command, I keep the count threshold the same (10), but this
# time any gene with more than 83 % of of samples with an expression under 10 will be removed,
# so it is again more stringent.
idx_10c4s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 4 # 21,818 genes
sum(idx_10c4s)
idx_5c4s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 4 # 23,183 genes
sum(idx_5c4s)
idx_10c6s <- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 6 # 21,238 genes
sum(idx_10c6s)
idx_5c6s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 6 # 22,550 genes
sum(idx_5c6s)
# Subset the count data
dds_10c4s <- dds[idx_10c4s,]
write.table(counts(dds_10c4s, normalized=TRUE), file = "counts.Tlei.6_timepoints.filtr-normalized_DESEQ2.txt")
# The largest difference between filtering sets is 1,945 genes, which is only 6 % of the total
# amount of genes. I decided to carry on with the stringent count criterium but non-stringent sample
# criterium (less than 10 counts in more than 32 samples, which includes 21,818 genes)
# Calculate dispersion, DE, etc.
dds_10c4s <- DESeq(dds_10c4s)
# Two transformations to reduce dependency between mean and variance
# 10c8s - vst seems best
rld_10c4s <- rlog(dds_10c4s)
vsd_10c4s <- varianceStabilizingTransformation(dds_10c4s)
notAllZero <- (rowSums(counts(dds_10c4s,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds_10c4s,normalized=T)[notAllZero,]+1))
msd2 <- meanSdPlot(assay(rld_10c4s[notAllZero,]))
msd3 <- meanSdPlot(assay(vsd_10c4s[notAllZero,]))
pdf("SdPlots_Tlei_10c4s.pdf", width = 8, height = 10)
msd$gg + scale_y_continuous(limits = c(0, 6))
msd2$gg + scale_y_continuous(limits = c(0, 6))
msd3$gg + scale_y_continuous(limits = c(0, 6))
dev.off()
options(stringsAsFactors = FALSE)
# Collect and transpose expression data
datExpr0 <- assay(vsd_10c4s)
datExpr0 <- t(datExpr0)
# test if all are "good genes"
gsg = goodSamplesGenes(assay(vsd_10c4s), verbose = 3);
gsg$allOK
# Visualize outliers
sampleTree = hclust(dist(datExpr0), method = "average");
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Sample B and F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 160, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 160, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
rownames(datTraits) <- rownames(datExpr)
datTraits <- metadata
rownames(datTraits) <- rownames(datExpr)
datTraits$sample <- as.numeric(datTraits$sample)
datTraits$time <- as.numeric(datTraits$time)
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
# Saving data ready for network construction
save(datExpr, datTraits, file = "coexpression_input_Tlei_vsd_10c4s.RData")
# Load input data
lnames = load(file = "coexpression_input_Tlei_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Evaluate softpower thresholds for an unsigned network
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
softpower_table <- sft[["fitIndices"]]
softpower_table$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
write.table(softpower_table, file = "SoftPower_table_Tlei_unsigned_vsd10c4s.txt")
View(softpower_table)
