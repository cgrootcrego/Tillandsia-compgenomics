ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
rep(c(1),208)
map_rates$whatver <- rep(c(1),208)
ggplot(map_rates, aes(x= whatver, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate", "whatever")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/")
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
#Function to trim the data
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
#Function to trim the data
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:79)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t")
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t")
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t", rownames= 1)
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t",
row.names= 1)
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t",
row.names= 1)
# Inspection of count set of ORTHOLOGOUS GENES only
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = "\t",
row.names= 1)
View(data)
#Function to trim the data
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
library("edgeR")
library("RUVSeq")
library("HTSFilter")
library("devtools")
library("feathers")
library("RColorBrewer")
data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
write.table(data_trim, file ="counts.Tfas_Tlei_6_timepoints.orthologs.filtered.txt",
sep = "\t", quote = F)
hist(log(cpm(data_trim)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
plot(apply(log(cpm(data_trim)), 1, mean),apply(log(cpm(data_trim)), 1, var),
xlab="Mean expression (log(cpm))",
ylab="Variance of expression log(cpm)",
main = "Expression Variance")
hist(log(cpm(data_trim)),
breaks = 1000,
main = "Frequency of log(cpm)",
xlab = "Expression (log(cpm))")
# Plot PCA
groupGLM <- factor(c(rep("Tfas.A",6),rep("Tfas.B",6),rep("Tfas.C",6), # Populations
rep("Tfas.D",6),rep("Tfas.E",6),rep("Tfas.F",6),
rep("Tlei.A",6),rep("Tlei.C",6),rep("Tlei.D",6),
rep("Tlei.E",6),rep("Tlei.F",6),rep("Tlei.G",6)))
y <- DGEList(counts=data_trim,group=groupGLM)
samples <- c(rep("#E41A1C",6),rep("#377EB8",6), rep("#4DAF4A",6), #define colors for ecotype pairs
rep("#984EA3",6),rep("#FF7F00",6), rep("#FFFF33",6),
rep("#E41A1C",6),rep("#4DAF4A",6),rep("#984EA3",6),
rep("#FF7F00",6),rep("#FFFF33",6),rep("#A65628",6))
times <- c(rep(c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02"),12))
species <- c(rep(17,36),rep(19,36)) #define symbols for ecotypes
plotPCA(y$counts,col=times,  k=2, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
plotPCA(y$counts,col=samples,  k=5, cex = 1.7, pch=species, main = "PCA of transcripts counts", labels = F)
View(data_trim)
# Inspection of count set of ORTHOLOGOUS GENES only
# data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
# write.table(data_trim, file ="counts.Tfas_Tlei_6_timepoints.orthologs.filtered.txt",
#             sep = "\t", quote = F)
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = '\t')
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(1:36)]
write.table(data_tfas, "counts.Tfas.6_timepoints.orthologs.txt", sep = "\t", quote = F)
# Trim low-expression genes and remake plots
data_tfas_trim = trimDat("counts.Tfas.6_timepoints.orthologs.txt")
View(data_tfas)
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(1:42)]
write.table(data_tfas, "counts.Tfas.6_timepoints.orthologs.txt", sep = "\t", quote = F)
# Trim low-expression genes and remake plots
data_tfas_trim = trimDat("counts.Tfas.6_timepoints.orthologs.txt")
View(data_tfas)
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(6:42)]
#Function to trim the data
trimDat = function (counts) {
data = read.table(counts,header= T, row.names = 1)
#data = data[,c(6:77)]
print(paste0("Number of samples: ", dim(data)[2]))
print(paste0("Starting number of genes: ", dim(data)[1]))
data=data[apply(cpm(data),1,function(x){!(mean(x)<1)}),]
print(paste0("SNumber of genes retaned after trimming: ", dim(data)[1]))
return(data)
}
View(data_tfas)
# Inspection of count set of ORTHOLOGOUS GENES only
# data_trim = trimDat("counts.Tfas_Tlei_6_timepoints.orthologs.txt")
# write.table(data_trim, file ="counts.Tfas_Tlei_6_timepoints.orthologs.filtered.txt",
#             sep = "\t", quote = F)
data <- read.delim("counts.Tfas_Tlei_6_timepoints.orthologs.txt", header = T, sep = '\t', row.names=1)
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(7:42)]
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(7:41)]
write.table(data_tfas, "counts.Tfas.6_timepoints.orthologs.txt", sep = "\t", quote = F)
# Trim low-expression genes and remake plots
data_tfas_trim = trimDat("counts.Tfas.6_timepoints.orthologs.txt")
write.table(data_tfas_trim, file ="counts.Tfas.6_timepoints.orthologs.filtered.txt",
write.table(data_tfas_trim, file ="counts.Tfas.6_timepoints.orthologs.filtered.txt",
sep = "\t", quote = F)
# Trim low-expression genes and remake plots
# data_tfas_trim = trimDat("counts.Tfas.6_timepoints.orthologs.txt")
# write.table(data_tfas_trim, file ="counts.Tfas.6_timepoints.orthologs.filtered.txt",
#               sep = "\t", quote = F)
data_tfas_trim <- read.delim("counts.Tfas.6_timepoints.orthologs.filtered.txt")
groupGLM <- factor(c(rep("Tfas.A",6),rep("Tfas.B",6),rep("Tfas.C",6), # Populations
rep("Tfas.D",6),rep("Tfas.E",6),rep("Tfas.F",6)))
y <- DGEList(counts=data_tfas_trim,group=groupGLM)
samples <- c(rep("#E41A1C",6),rep("#377EB8",6), rep("#4DAF4A",6), #define colors for ecotype pairs
rep("#984EA3",6),rep("#FF7F00",6), rep("#FFFF33",6))
times <- c(rep(c(15,16,17,18,19,8),6)) #define symbols for ecotypes
#Plot PCA, change k for visualizing different numbers of components
par(mfrow=c(1,1))
plotPCA(y$counts,col=samples,  k=6, cex = 1.7, pch=times, main = "PCA of transcripts counts - T. fasciculata", labels = F)
plotPCA(y$counts,col=samples,  k=4, cex = 1.7, pch=times, main = "PCA of transcripts counts - T. fasciculata", labels = F)
# Plot PCA
groupGLM <- factor(c(rep("Tfas.A",6),rep("Tfas.B",6),rep("Tfas.C",6), # Populations
rep("Tfas.D",6),rep("Tfas.E",6),rep("Tfas.F",6)))
y <- DGEList(counts=data_tfas_trim,group=groupGLM)
View(y)
View(data_tfas_trim)
# Orthologous genes - T. fasciculata samples only
data_tfas <- data[,c(6:41)]
View(data_tfas)
write.table(data_tfas, "counts.Tfas.6_timepoints.orthologs.txt", sep = "\t", quote = F)
# Trim low-expression genes and remake plots
data_tfas_trim = trimDat("counts.Tfas.6_timepoints.orthologs.txt")
write.table(data_tfas_trim, file ="counts.Tfas.6_timepoints.orthologs.filtered.txt",
sep = "\t", quote = F)
data_tfas_trim <- read.delim("counts.Tfas.6_timepoints.orthologs.filtered.txt")
# Plot PCA
groupGLM <- factor(c(rep("Tfas.A",6),rep("Tfas.B",6),rep("Tfas.C",6), # Populations
rep("Tfas.D",6),rep("Tfas.E",6),rep("Tfas.F",6)))
y <- DGEList(counts=data_tfas_trim,group=groupGLM)
samples <- c(rep("#E41A1C",6),rep("#377EB8",6), rep("#4DAF4A",6), #define colors for ecotype pairs
rep("#984EA3",6),rep("#FF7F00",6), rep("#FFFF33",6))
times <- c(rep(c(15,16,17,18,19,8),6)) #define symbols for ecotypes
plotPCA(y$counts,col=samples,  k=4, cex = 1.7, pch=times, main = "PCA of transcripts counts - T. fasciculata", labels = F)
data_tlei <- data[,c(42:77)]
View(data_tlei)
write.table(data_tlei, "counts.Tlei.6_timepoints.orthologs.txt", sep = "\t", quote = F)
# Trim low-expression genes and remake plots
data_tlei_trim = trimDat("counts.Tlei.6_timepoints.orthologs.txt")
write.table(data_tlei_trim, file ="counts.Tlei.6_timepoints.orthologs.filtered.txt",
sep = "\t", quote = F)
data_tlei_trim <- read.delim("counts.Tlei.6_timepoints.orthologs.filtered.txt")
# Plot PCA
groupGLM <- factor(c(rep("Tlei.A",6),rep("Tlei.C",6),rep("Tlei.D",6), # Populations
rep("Tlei.E",6),rep("Tlei.F",6),rep("Tlei.G",6)))
y <- DGEList(counts=data_tlei_trim,group=groupGLM)
samples <- c(rep("#E41A1C",6),rep("#4DAF4A",6),rep("#984EA3",6),
rep("#FF7F00",6),rep("#FFFF33",6),rep("#A65628",6))
times <- c(rep(c(15,16,17,18,19,8),6)) #define symbols for ecotypes
plotPCA(y$counts,col=samples,  k=4, cex = 1.7, pch=times, main = "PCA of transcripts counts - T. leiboldiana", labels = F)
