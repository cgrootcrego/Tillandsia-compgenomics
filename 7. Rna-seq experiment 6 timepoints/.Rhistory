xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library('DESeq2')
library("vsn")
library("gplots")
library("ggplot2")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("WGCNA")
# Read in counts and create metadata
counts <- read.delim('counts.Tfas.6_timepoints.txt', header = T, row.names = 1)
metadata <- data.frame(sample=c(rep(1,6), rep(2,6), rep(3,6),
rep(4,6),rep(5,6), rep(6,6)),
time=c(rep(c(1,2,3,4,5,6))))
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~time)
metadata <- data.frame(as.factor(sample=c(rep(1,6), rep(2,6), rep(3,6),
rep(4,6),rep(5,6), rep(6,6))),
time=as.factor(c(rep(c(1,2,3,4,5,6)))))
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~time)
summary(metadata)
metadata <- data.frame(sample=c(rep(1,6), rep(2,6), rep(3,6),
rep(4,6),rep(5,6), rep(6,6)),
time=c(rep(c(1,2,3,4,5,6))))
summary(metadata)
metadata$sample <- as.factor(metadata$sample)
summary(metadata)
metadata$time <- as.factor(metadata$time)
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~time)
dds <- estimateSizeFactors(dds)
rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 8
counts(dds, normalized=TRUE) >= 10
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command filters out any gene that has less than 10 counts
# in more than 8 samples.
idx_10c8s<- rowSums( counts(dds, normalized=TRUE) <= 10 ) >= 4 # 20,681 genes
dds[idx_10c8s,]
counts(dds, normalized=TRUE)
# save normalized counts
counts.norm <- counts(dds, normalized=TRUE)
View(counts.norm)
counts(dds, normalized=TRUE) <= 10 )
counts(dds, normalized=TRUE) <= 10
counts(dds, normalized=TRUE) >= 10
counts(dds, normalized=TRUE) >= 10 ) <= 32
rowSums( counts(dds, normalized=TRUE) >= 10 ) <= 32
rowSums( counts(dds, normalized=TRUE) >= 10 ) <= 4
idx_10c8s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) <= 4
dds[idx_10c8s,]
idx_10c8s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 4 # 20,681 genes
# Subset the count data
dds_10c8s <- dds[idx_10c8s,]
dds_10c8s
idx_5c8s <- rowSums( counts(dds, normalized=TRUE) <= 5 ) >= 4 # 21,964 genes
dds_5c8s <- dds[idx_5c8s,]
dds_5c8s
idx_5c8s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 4 # 21,964 genes
dds_5c8s <- dds[idx_5c8s,]
dds_5c8s
idx_10c12s <- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 6 # 19,983 genes
dds_10c12s <- dds[idx_10c12s,]
dds_10c12s
idx_5c12s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 6 # 21,106 genes
dds_5c12s <- dds[idx_5c12s,]
dds_5c12s
dds_10c8s
idx_10c8s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 8 # 20,681 genes
# Subset the count data
dds_10c8s <- dds[idx_10c8s,]
dds_10c8s
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command keeps any gene that has more than 10 counts
# in more than 4 samples, meaning that every gene with more than 88 % of samples with an expression
# under 10 will be filtered out. In the second command, I reduce the count threshold to 5, which is
# more stringent. In the third command, I keep the count threshold the same (10), but this
# time any gene with more than 83 % of of samples with an expression under 10 will be removed,
# so it is again more stringent.
idx_10c8s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 4 # 20,681 genes
idx_5c8s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 4 # 21,964 genes
idx_10c12s <- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 6 # 19,983 genes
idx_5c12s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 6 # 21,106 genes
# Subset the count data
dds_10c8s <- dds[idx_10c8s,]
dds_5c8s <- dds[idx_5c8s,]
dds_10c12s <- dds[idx_10c12s,]
dds_5c12s <- dds[idx_5c12s,]
# Subset the count data
dds_10c4s <- dds[idx_10c4s,]
dds_5c4s <- dds[idx_5c4s,]
dds_10c6s <- dds[idx_10c6s,]
dds_5c6s <- dds[idx_5c6s,]
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command keeps any gene that has more than 10 counts
# in more than 4 samples, meaning that every gene with more than 88 % of samples with an expression
# under 10 will be filtered out. In the second command, I reduce the count threshold to 5, which is
# more stringent. In the third command, I keep the count threshold the same (10), but this
# time any gene with more than 83 % of of samples with an expression under 10 will be removed,
# so it is again more stringent.
idx_10c4s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 4 # 20,681 genes
idx_5c4s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 4 # 21,964 genes
idx_10c6s <- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 6 # 19,983 genes
idx_5c6s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 6 # 21,106 genes
# Subset the count data
dds_10c4s <- dds[idx_10c4s,]
dds_5c4s <- dds[idx_5c4s,]
dds_10c6s <- dds[idx_10c6s,]
dds_5c6s <- dds[idx_5c6s,]
dds_10c4s
dds_5c4s <- dds[idx_5c4s,]
dds_5c4s
dds_10c6s
dds_5c6s
dds
# The largest difference between filtering sets is 1,945 genes, which is only 6 % of the total
# amount of genes. I decided to carry on with the stringent count criterium but non-stringent sample
# criterium (less than 10 counts in more than 32 samples, which includes 21,818 genes)
# Calculate dispersion, DE, etc.
dds_10c8s <- DESeq(dds_10c4s)
# Two transformations to reduce dependency between mean and variance
# 10c8s - vst seems best
rld_10c8s <- rlog(dds_10c8s)
vsd_10c8s <- varianceStabilizingTransformation(dds_10c8s)
# Visualize the relationship of mean and variance of all possible transformations
notAllZero <- (rowSums(counts(dds_10c8s,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds_10c8s,normalized=T)[notAllZero,]+1))
msd2 <- meanSdPlot(assay(rld_10c8s[notAllZero,]))
msd3 <- meanSdPlot(assay(vsd_10c8s[notAllZero,]))
pdf("SdPlots_Tfas_10c8s.pdf", width = 8, height = 10)
msd$gg + scale_y_continuous(limits = c(0, 6))
msd2$gg + scale_y_continuous(limits = c(0, 6))
msd3$gg + scale_y_continuous(limits = c(0, 6))
library('DESeq2')
library("vsn")
library("gplots")
library("ggplot2")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("WGCNA")
install.packages(vsn)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
# Visualize the relationship of mean and variance of all possible transformations
notAllZero <- (rowSums(counts(dds_10c8s,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds_10c8s,normalized=T)[notAllZero,]+1))
library("vsn")
# Visualize the relationship of mean and variance of all possible transformations
notAllZero <- (rowSums(counts(dds_5c8s,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds_5c8s,normalized=T)[notAllZero,]+1))
msd2 <- meanSdPlot(assay(rld_5c8s[notAllZero,]))
# Two transformations to reduce dependency between mean and variance
# 10c8s - vst seems best
rld_10c8s <- rlog(dds_10c8s)
vsd_10c8s <- varianceStabilizingTransformation(dds_10c8s)
# Visualize the relationship of mean and variance of all possible transformations
notAllZero <- (rowSums(counts(dds_10c8s,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds_10c8s,normalized=T)[notAllZero,]+1))
msd2 <- meanSdPlot(assay(rld_10c8s[notAllZero,]))
msd3 <- meanSdPlot(assay(vsd_10c8s[notAllZero,]))
pdf("SdPlots_Tfas_10c8s.pdf", width = 8, height = 10)
msd$gg + scale_y_continuous(limits = c(0, 6))
msd2$gg + scale_y_continuous(limits = c(0, 6))
msd3$gg + scale_y_continuous(limits = c(0, 6))
dev.off()
# The largest difference between filtering sets is 1,945 genes, which is only 6 % of the total
# amount of genes. I decided to carry on with the stringent count criterium but non-stringent sample
# criterium (less than 10 counts in more than 32 samples, which includes 21,818 genes)
# Calculate dispersion, DE, etc.
dds_10c4s <- DESeq(dds_10c4s)
vsd_10c4s <- varianceStabilizingTransformation(dds_10c4s)
# Now, we prepare the data for use in WGCNA
plotPCA(vsd_10c4s, intgroup=c("time", "sample"))
options(stringsAsFactors = FALSE)
# Collect and transpose expression data
datExpr0 <- assay(vsd_10c4s)
datExpr0 <- t(datExpr0)
# test if all are "good genes"
gsg = goodSamplesGenes(assay(vsd_10c4s), verbose = 3);
gsg$allOK
# Visualize outliers
sampleTree = hclust(dist(datExpr0), method = "average");
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Sample B and F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 145, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 145, minSize = 10)
table(clust)
# Sample B and F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 160, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 160, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
datTraits <- metadata[-c(12,36),]
rownames(datTraits) <- rownames(datExpr)
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
numbers2colors
?numbers2colors
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(numeric(datTraits), signed = FALSE);
datTraits$sample <- as.numeric(datTraits$sample)
dat$traits <- as.numeric(datTraits$time)
dat$traits <- as.numeric(datTraits$time)
datTraits$time <- as.numeric(datTraits$time)
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(numeric(datTraits), signed = FALSE);
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(as.numeric(datTraits), signed = FALSE);
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors((datTraits, signed = FALSE);
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
# Saving data ready for network construction
save(datExpr, datTraits, file = "coexpression_input_Tfas_vsd_10c4s.RData")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("WGCNA")
# Set necessary environment for WGCNA
options(stringsAsFactors = FALSE);
allowWGCNAThreads()
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=30, by=2))
# Call the network topology analysis function, I decided to choose a signed network
# signed network: direction of correlation is integrated (positive vs negative)
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = "signed")
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
View(sft)
sft[["fitIndices"]]
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softpower_table <- sft[["fitIndices"]]
View(softpower_table)
format(softpower_table$SFT.R.sq, scientific = F)
softpower_table$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
# Based on what I have read, one should choose a power that maintains an R^2 as high as
# possible and a mean connectivity between 30 and 100. Therefore, I chose a soft-thresholding
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 18;
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower, type = "signed")
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
