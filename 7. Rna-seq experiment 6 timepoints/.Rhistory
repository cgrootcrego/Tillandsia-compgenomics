if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
# In this script, we make step-by-step coexpression networks following the WGCNA tutorials.
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("WGCNA")
library("reshape2")
library("ggplot2")
# Set necessary environment for WGCNA
options(stringsAsFactors = FALSE);
allowWGCNAThreads()
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Based on what I have read, one should choose a power that maintains an R^2 as high as
# possible and a mean connectivity between 30 and 100. Therefore, I chose a soft-thresholding
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 18;
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower, type = "signed")
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
# We end up with 114 modules, the largest one contains 1254 genes, the smallest
# contains 36 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Threshold for merging modules
MEDissThres = 0.1
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, softpower_table, file = "coexpression_network_Tfas_signed18_vsd_10c4s.RData")
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "coexpression_network_Tfas_signed18_vsd_10c4s.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#Gather some info on significant modules
modules_sign_time2 <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time2) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time2$gene_count <- nr_genes_module[substring(rownames(modules_sign_time2),3)]
modules_sign_time2$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time2),1]
modules_sign_time2$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time2),2]
write.csv(modules_sign_time2, file = "Modules_sign-Time_soft18.txt", quote = F, sep = "\t")
write.table(modules_sign_time2, file = "Modules_sign-Time_soft18.txt", quote = F, sep = "\t")
# Now I want to focus just on time differences
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
# Now create a per-gene summary of the network, containing the module, the correlation of
# each trait to the time points (significance), the p-value of the significance, and the
# membership and o-value for each module, ranked by their significance for time.
# Create the starting data frame
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time2), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed16_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_", module, ".txt", sep="");
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
write.table(geneInfo, file = "geneInfo_co-expression_Tfasc_vsd_10c4s_signed18.csv", quotes = F, sep = "\t")
write.table(geneInfo, file = "geneInfo_co-expression_Tfasc_vsd_10c4s_signed18.csv", quote = F, sep = "\t")
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
write.table(module_corr, file = "Correlation_Modules_to_Traits_Tfas_signed18_vsd10c4s.txt", quote = F, sep = "\t")
View(datExpr)
setwd('/home/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library('DESeq2')
library("vsn")
library("gplots")
library("ggplot2")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("WGCNA")
# Read in counts and create metadata
counts <- read.delim('counts.Tfas.6_timepoints.txt', header = T, row.names = 1)
metadata <- data.frame(sample=c(rep(1,6), rep(2,6), rep(3,6),
rep(4,6),rep(5,6), rep(6,6)),
time=c(rep(c(1,2,3,4,5,6))))
metadata$sample <- as.factor(metadata$sample)
metadata$time <- as.factor(metadata$time)
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~time)
dds <- estimateSizeFactors(dds)
# save normalized counts
counts.norm <- counts(dds, normalized=TRUE)
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command keeps any gene that has more than 10 counts
# in more than 4 samples, meaning that every gene with more than 88 % of samples with an expression
# under 10 will be filtered out. In the second command, I reduce the count threshold to 5, which is
# less stringent. In the third command, I keep the count threshold the same (10), but this
# time any gene with more than 83 % of of samples with an expression under 10 will be removed,
# so it is again more stringent.
idx_10c4s<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 4 # 21,818 genes
idx_5c4s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 4 # 23,183 genes
idx_10c6s <- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 6 # 21,238 genes
idx_5c6s <- rowSums( counts(dds, normalized=TRUE) >= 5 ) >= 6 # 22,550 genes
# Subset the count data
dds_10c4s <- dds[idx_10c4s,]
dds_5c4s <- dds[idx_5c4s,]
dds_10c6s <- dds[idx_10c6s,]
dds_5c6s <- dds[idx_5c6s,]
# The largest difference between filtering sets is 1,945 genes, which is only 6 % of the total
# amount of genes. I decided to carry on with the stringent count criterium but non-stringent sample
# criterium (less than 10 counts in more than 32 samples, which includes 21,818 genes)
# Calculate dispersion, DE, etc.
dds_10c4s <- DESeq(dds_10c4s)
vsd_10c4s <- varianceStabilizingTransformation(dds_10c4s)
assay(vsd_10c4s)
# Collect and transpose expression data
datExpr0 <- assay(vsd_10c4s)
write.table(datExpr0, file = "counts.Tfas.6_timepoints.filtr-transform-normalized_DESEQ2.txt")
counts <- read.delim("counts.Tfas.6_timepoints.filtr-transform-normalized_DESEQ2.txt", header = T, row.names = 1)
View(counts)
counts <- read.table("counts.Tfas.6_timepoints.filtr-transform-normalized_DESEQ2.txt", header = T, row.names = 1)
View(counts)
genes <- read.table("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt")
View(genes)
genes <- as.vector(read.table("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt"))
View(genes)
genes <- scan("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt"))
genes <- scan("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt")
genes <- scan("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt", character(), quote = "")
module_counts<- subset(counts, rownames(counts) == genes)
module_counts<- subset(counts, rownames(counts) %in% genes)
View(module_counts)
sapply(seq(2, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(-1:1)]))
mean(module_counts[1,c(1:6)])
mean(module_counts[1,1:6])
module_counts[1,1:6]
summary(module_counts)
mean(module_counts[1,1:6])
mean(module_counts[2,1:6])
module_counts[2,1:6]
mean(as.matrix(module_counts[1,1:6]))
as.matrix(module_counts[1,1:6])
as.vector(module_counts[1,1:6])
mean(as.vector(module_counts[1,1:6]))
View(module_counts)
seq()
?seq()
seq(2, ncol(module_counts), 6)
seq(1, ncol(module_counts), 6)
seq(0, ncol(module_counts), 6)
sapply(seq(0, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(1:6)]))
sapply(seq(2, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(-1:5)]))
seq(2, ncol(module_counts), 6)
sapply(seq(2, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(-1:4)]))
mean_count <- sapply(seq(2, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(-1:4)]))
mean_count <- as.data.frame(sapply(seq(2, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+(-1:4)])))
View(mean_count)
seq(1, ncol(module_counts), 6)
sapply(seq(1, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j))
sapply(seq(1, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j]))
module_counts[, j]
j = seq(1, ncol(module_counts), 6)
module_counts[, j]
sapply(seq(1, ncol(module_counts), 6), function(j) rowMeans(module_counts[, j+1]))
rowMeans(module_counts[, j])
seq(1, ncol(module_counts), 6)
seq(1, 6, 1)
sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30]))
sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)]))
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(mean_count)
colnames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
library("ggplot2")
library("reshape2")
mean_count_m <- melt(mean_count)
?melt
mean_count_m <- melt(mean_count, id.vars = row.names(mean_count))
mean_count$gene_id <- row.names(mean_count)
mean_count_m <- melt(mean_count, id.vars = row.names(mean_count))
View(mean_count)
mean_count_m <- melt(mean_count, id.vars = gene_id)
mean_count_m <- melt(mean_count, id.vars = mean_count$gene_id)
mean_count_m <- melt(mean_count, id.vars = "gene_id")
View(mean_count_m)
colnames(mean_count_m) <- c("gene_id", "time", "count")
ggplot(mean_count_m, aes(x=time, y=count)) +
geom_dotplot(binaxis='y', stackdir='center')
write.table(counts(dds_10c4s, normalized=TRUE), file = "counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt")
counts <- read.table("counts.Tfas.6_timepoints.filtr-normalized_DESEQ2.txt", header = T, row.names = 1)
genes <- scan("Genes-for-Enrichment_T.fasciculata_signed18_vst10c4s_lightcyan.txt", character(), quote = "")
module_counts<- subset(counts, rownames(counts) %in% genes)
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_count$gene_id <- row.names(mean_count)
mean_count_m <- melt(mean_count, id.vars = "gene_id")
colnames(mean_count_m) <- c("gene_id", "time", "count")
ggplot(mean_count_m, aes(x=time, y=count)) +
geom_dotplot(binaxis='y', stackdir='center')
ggplot(mean_count_m, aes(x=time, y=count)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize = 1)
ggplot(mean_count_m, aes(x=time, y=count)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize = 0.1)
ggplot(mean_count_m, aes(x=time, y=count)) +
geom_dotplot(binaxis='y', stackdir='center', dotsize = 0.3)
source("~/.active-rstudio-document")
