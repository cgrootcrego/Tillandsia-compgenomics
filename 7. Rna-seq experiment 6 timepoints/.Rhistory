r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("WGCNA")
library("ggplot2")
# Set necessary environment for WGCNA
options(stringsAsFactors = FALSE);
allowWGCNAThreads()
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Based on what I have read, one should choose a power that maintains an R^2 as high as
# possible and a mean connectivity between 30 and 100. Therefore, I chose a soft-thresholding
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 8;
adjacency = adjacency(datExpr, power = softPower)
#adjacency2 = adjacency(datExpr, power = softPower2)
TOM = TOMsimilarity(adjacency);
#TOM2 = TOMsimilarity(adjacency2);
dissTOM = 1-TOM
#dissTOM2 = 1-TOM2
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
#geneTree2 = hclust(as.dist(dissTOM2), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
#dynamicMods2 = cutreeDynamic(dendro = geneTree2, distM = dissTOM2,
#                            deepSplit = 2, pamRespectsDendro = FALSE,
#                            minClusterSize = minModuleSize);
table(dynamicMods)
mean(table(dynamicMods))
write.table(table(dynamicMods), file = "Modules_soft8_unsigned.txt")
#write.table(table(dynamicMods2), file = "Modules_soft7_unsigned.txt")
#modules8 <- read.table("Modules_soft8_unsigned.txt")
#modules7 <- read.table("Modules_soft7_unsigned.txt")
#colnames(modules7) <- c("dynamicMods", "Freq")
#modules <- merge(modules8, modules7, by = "dynamicMods", all = T)
#colnames(modules) <- c("modules", "genecount8", "genecount7")
#modules_m <- melt(modules, id.vars = "modules")
#ggplot(modules_m, aes(x=variable, y=value)) +
#        geom_boxplot()
#ggplot(modules_m, aes(x=value, color=variable)) +
#        geom_density()
# We end up with 109 modules, the largest one contains 1631 genes, the smallest
# contains 34 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree3, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Merge modules with very similar expression, anything with a correlation higher than 90 %.
# This reduces the number of modules from 109 to 100.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.15
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree3, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#Gather some info on significant modules
modules_sign_time <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time$gene_count <- nr_genes_module[substring(rownames(modules_sign_time),3)]
modules_sign_time$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time),1]
modules_sign_time$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time),2]
View(modules_sign_time)
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("WGCNA")
library("ggplot2")
library(reshape2)
# Set necessary environment for WGCNA
options(stringsAsFactors = FALSE);
allowWGCNAThreads()
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Evaluate softpower thresholds for an unsigned network
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
softpower_table <- sft[["fitIndices"]]
softpower_table$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# Based on what I have read, one should choose a power that maintains an R^2 as high as
# possible and a mean connectivity between 30 and 100. Therefore, I chose a soft-thresholding
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 8;
#softPower2 = 7
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower)
#adjacency2 = adjacency(datExpr, power = softPower2)
TOM = TOMsimilarity(adjacency);
#TOM2 = TOMsimilarity(adjacency2);
dissTOM = 1-TOM
#dissTOM2 = 1-TOM2
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
#geneTree2 = hclust(as.dist(dissTOM2), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
#dynamicMods2 = cutreeDynamic(dendro = geneTree2, distM = dissTOM2,
#                            deepSplit = 2, pamRespectsDendro = FALSE,
#                            minClusterSize = minModuleSize);
table(dynamicMods)
mean(table(dynamicMods))
write.table(table(dynamicMods), file = "Modules_soft8_unsigned.txt")
#write.table(table(dynamicMods2), file = "Modules_soft7_unsigned.txt")
#modules8 <- read.table("Modules_soft8_unsigned.txt")
#modules7 <- read.table("Modules_soft7_unsigned.txt")
#colnames(modules7) <- c("dynamicMods", "Freq")
#modules <- merge(modules8, modules7, by = "dynamicMods", all = T)
#colnames(modules) <- c("modules", "genecount8", "genecount7")
#modules_m <- melt(modules, id.vars = "modules")
#ggplot(modules_m, aes(x=variable, y=value)) +
#        geom_boxplot()
#ggplot(modules_m, aes(x=value, color=variable)) +
#        geom_density()
# We end up with 109 modules, the largest one contains 1631 genes, the smallest
# contains 34 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree3, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Merge modules with very similar expression, anything with a correlation higher than 90 %.
# This reduces the number of modules from 109 to 100.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree3, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
write.table(softpower_table, file = "SoftPower_table_Tfas_unsigned_vsd10c4s.txt")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
moduleTraitCor
moduleTraitPvalue
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
View(module_corr)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
write.table(module_corr, file = "Correlation_Modules_to_Traits_Tfas_unsigned8_vsd10c4s.txt", quote = F, sep = "\t")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("WGCNA")
library("reshape2")
library("ggplot2")
# Set necessary environment for WGCNA
options(stringsAsFactors = FALSE);
allowWGCNAThreads()
# Load input data
lnames = load(file = "coexpression_input_Tfas_vsd_10c4s.RData");
softPower2 = 16
adjacency2 = adjacency(datExpr, power = softPower2, type = "signed")
TOM2 = TOMsimilarity(adjacency2);
dissTOM2 = 1-TOM2
geneTree2 = hclust(as.dist(dissTOM2), method = "average");
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
dynamicMods2 = cutreeDynamic(dendro = geneTree2, distM = dissTOM2,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
# We end up with 114 modules, the largest one contains 1254 genes, the smallest
# contains 36 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
# Merge modules with very similar expression, anything with a correlation higher than 85 %.
# This reduces the number of modules from 103 to 83.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Threshold for merging modules
MEDissThres = 0.05
# Threshold for merging modules
MEDissThres = 0.1
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, softpower_table, file = "coexpression_network_Tfas_signed16_vsd_10c4s.RData")
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#Gather some info on significant modules
modules_sign_time2 <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,2] < 0.05,])
colnames(modules_sign_time2) <- c("corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time2$gene_count <- nr_genes_module[substring(rownames(modules_sign_time2),3)]
modules_sign_time2$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time2),1]
modules_sign_time2$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time2),2]
write.csv(modules_sign_time2, file = "Modules_sign-Time_soft16.txt", quote = F, sep = "\t")
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
# Now create a per-gene summary of the network, containing the module, the correlation of
# each trait to the time points (significance), the p-value of the significance, and the
# membership and o-value for each module, ranked by their significance for time.
# Create the starting data frame
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
write.csv(geneInfo, file = "geneInfo_co-expression_Tfasc_vsd_10c4s_signed16.csv")
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed16_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time2), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed16_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time2), 3)
modNames
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_T.fasciculata_signed16_vst10c4s_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
View(modules_sign_time2)
