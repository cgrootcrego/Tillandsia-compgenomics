gsg = goodSamplesGenes(assay(vsd), verbose = 3);
gsg$allOK
# Visualize outliers
sampleTree = hclust(dist(datExpr0), method = "average");
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Sample B and F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 260, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 160, minSize = 10)
table(clust)
# Sample B and F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 270, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 270, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
# Turn the counts and metadata into a DESeq object
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design=~species*time)
dds <- estimateSizeFactors(dds)
# Filter out lowly expressed genes: I try out several filtering thresholds both on number of counts
# per gene and number of samples. The first command keeps any gene that has more than 10 counts
# in more than 4 samples, meaning that every gene with more than 88 % of samples with an expression
# under 10 will be filtered out. In the second command, I reduce the count threshold to 5, which is
# less stringent. In the third command, I keep the count threshold the same (10), but this
# time any gene with more than 83 % of of samples with an expression under 10 will be removed,
# so it is again more stringent.
idx<- rowSums( counts(dds, normalized=TRUE) >= 10 ) >= 7 # 22,381 genes
# Subset the count data
dds <- dds[idx,]
dds <- DESeq(dds)
# Two transformations to reduce dependency between mean and variance
# 10c8s - vst seems best
rld <- rlog(dds)
vsd <- varianceStabilizingTransformation(dds)
# Visualize the relationship of mean and variance of all possible transformations
notAllZero <- (rowSums(counts(dds,normalized = T)) > 0 )
msd <- meanSdPlot(log2(counts(dds,normalized=T)[notAllZero,]+1))
msd2 <- meanSdPlot(assay(rld[notAllZero,]))
msd3 <- meanSdPlot(assay(vsd[notAllZero,]))
pdf("SdPlots_Tfas-Tlei.pdf", width = 8, height = 10)
msd$gg + scale_y_continuous(limits = c(0, 6))
msd2$gg + scale_y_continuous(limits = c(0, 6))
msd3$gg + scale_y_continuous(limits = c(0, 6))
dev.off()
# Now, we prepare the data for use in WGCNA
options(stringsAsFactors = FALSE)
# Collect and transpose expression data
datExpr0 <- assay(vsd)
datExpr0 <- t(datExpr0)
# test if all are "good genes"
gsg = goodSamplesGenes(assay(vsd), verbose = 3);
gsg$allOK
# Visualize outliers
sampleTree = hclust(dist(datExpr0), method = "average");
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Sample Tfas_B and Tfas_F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 160, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 270, minSize = 10)
table(clust)
# Sample Tfas_B and Tfas_F at 21:00 seem outliers. We remove them manually.
# Plot a line to show the cut
abline(h = 170, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 170, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust!=0)
sum(keepSamples)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
datTraits <- metadata
rownames(datTraits) <- rownames(datExpr)
datTraits$sample <- as.numeric(datTraits$sample)
datTraits$time <- as.numeric(datTraits$time)
datTraits$species <- as.numeric(datTraits$species)
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
View(traitColors)
sampleTree2
View(metadata)
View(datExpr)
View(datExpr0)
View(datExpr0)
rownames(datExpr0[12,])
datExpr0[12,]
datExpr0[12,1]
datExpr0[12,0]
datTraits <- metadata[-c(12,36)]
rownames(datTraits) <- rownames(datExpr)
rownames(datExpr)
datTraits
datTraits <- metadata[-c(12,36),]
rownames(datTraits) <- rownames(datExpr)
datTraits$sample <- as.numeric(datTraits$sample)
datTraits$time <- as.numeric(datTraits$time)
datTraits$species <- as.numeric(datTraits$species)
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
# Saving data ready for network construction
save(datExpr, datTraits, file = "coexpression_input_Tfas-Tlei_vst.RData")
# Load input data
lnames = load(file = "coexpression_input_Tfas-Tlei_vst.RData");
# Choosing the soft threshold
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Evaluate softpower thresholds for an unsigned network
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
softpower_table <- sft[["fitIndices"]]
softpower_table$SFT.R.sq <- format(softpower_table$SFT.R.sq, scientific = F)
View(softpower_table)
softpower_table <- read.table("SoftPower_table_Tfas-Tlei_unsigned.txt", header = T)
write.table(softpower_table, file = "SoftPower_table_Tfas-Tlei_unsigned.txt")
# Based on what I have read, one should choose a power that maintains an R^2 as high as
# possible and a mean connectivity between 30 and 100. Therefore, I chose a soft-thresholding
# power of 18, where R^2 is 0.7923 and the mean connectivity is 44
softPower = 7;
# Building the ajacency and Topological Overlap Matrix - this is the co-expression network
adjacency = adjacency(datExpr, power = softPower)
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
# Gene clustering
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04)
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods)
mean(table(dynamicMods))
write.table(table(dynamicMods), file = "Modules_Tfas-Tlei_soft8_unsigned.txt")
# We end up with 70 modules, the largest one contains 5451 genes, the smallest
# contains 41 genes. Now we display the modules under the dendrogram.
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
# Merge modules with very similar expression, anything with a correlation higher than 90 %.
# This reduces the number of modules from 109 to 100.
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Threshold for merging modules
MEDissThres = 0.1
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Rename to moduleColors - not really sure what this does
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "coexpression_network_unsigned8_Tfas-Tlei_vst.RData")
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
module_corr <- cbind(as.data.frame(moduleTraitCor), moduleTraitPvalue)
colnames(module_corr) <- c("corr_sample", "corr_time", "pvalue_sample", "pvalue_time")
View(module_corr)
View(moduleTraitPvalue)
View(moduleTraitCor)
colnames(module_corr) <- c("corr_species", "corr_sample", "corr_time",
"pvalue_species", "pvalue_sample", "pvalue_time")
write.table(module_corr, file = "Correlation_Modules_to_Traits_Tfas-Tlei_unsigned8_vst.txt", quote = F, sep = "\t")
#Gather some info on significant modules
modules_sign_time <- as.data.frame(moduleTraitCor[moduleTraitPvalue[,1] < 0.05 & moduleTraitPvalue[,3] < 0.05,])
View(modules_sign_time)
colnames(modules_sign_time) <- c("corr_to_species","corr_to_sample", "corr_to_time")
nr_genes_module <- table(moduleColors)
modules_sign_time$gene_count <- nr_genes_module[substring(rownames(modules_sign_time),3)]
modules_sign_time$pvalue_species <- moduleTraitPvalue[rownames(modules_sign_time),1]
modules_sign_time$pvalue_sample <- moduleTraitPvalue[rownames(modules_sign_time),2]
modules_sign_time$pvalue_time <- moduleTraitPvalue[rownames(modules_sign_time),3]
write.table(modules_sign_time, file = "Modules_sign-Time_Tfas-Tlei_soft8.txt", quote = F, sep = "\t")
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.3,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
write.table(modules_sign_time, file = "Modules_sign-Time_Tfas-Tlei_soft7.txt", quote = F, sep = "\t")
write.table(module_corr, file = "Correlation_Modules_to_Traits_Tfas-Tlei_unsigned7_vst.txt", quote = F, sep = "\t")
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, file = "coexpression_network_unsigned7_Tfas-Tlei_vst.RData")
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_Tfas-Tlei_unsigned7_vst_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
# Now I want to focus just on time differences
time = as.data.frame(datTraits$time);
names(time) = "time"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, time, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(time), sep="");
names(GSPvalue) = paste("p.GS.", names(time), sep="")
# Now create a per-gene summary of the network, containing the module, the correlation of
# each trait to the time points (significance), the p-value of the significance, and the
# membership and o-value for each module, ranked by their significance for time.
# Create the starting data frame
probes = colnames(datExpr)
geneInfo0 = data.frame(moduleColor = moduleColors,
geneTraitSignificance,
GSPvalue)
# Order modules by their significance for time
modOrder = order(-abs(cor(MEs, time, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
oldNames = names(geneInfo0)
geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.time));
geneInfo = geneInfo0[geneOrder, ]
# Make gene lists for all modules that are correlated with time so that we can run GOterm enrichment for them
modNames <- substring(rownames(modules_sign_time), 3)
for (module in modNames){
# Select module probes
modGenes = rownames(geneInfo[geneInfo$moduleColor == module,])
# Write them into a file
fileName = paste("Genes-for-Enrichment_Tfas-Tlei_unsigned7_vst_", module, ".txt", sep="");
write.table(as.data.frame(modGenes), file = fileName,
row.names = FALSE, col.names = FALSE, quote = F)
}
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/7. Rna-seq experiment 6 timepoints/')
library("ggplot2")
library("reshape2")
library("stringr")
counts <- read.table("counts.Tfas_Tlei_6_timepoints.filtr-normalized_DESEQ2.txt", header = T, row.names = 1)
genes <- scan("Genes-for-Enrichment_Tfas-Tlei_unsigned7_vst_violet.txt", character(), quote = "")
goterms <- read.table("GO-term_enrichment_Tfas-Tlei_unsigned7_mod-violet.txt", sep = "\t", header = T)
module_counts<- subset(counts, rownames(counts) %in% genes)
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30,
j+36,j+42,j+48,j+54,j+60,
j+66)])))
mean_count <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30,
j+36,j+42,j+48,j+54,j+60,
j+66)])))
View(mean_count)
mean_count <- as.data.frame(sapply(seq(1, 12, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30,
j+36,j+42,j+48,j+54,j+60,
j+66)])))
?seq
View(module_counts)
module_counts_Tfas <- module_counts[, c(1:36)]
module_counts_Tfas <- module_counts_Tfas[, -c(12,36)]
module_counts_Tlei <- module_counts[, c(37:72)]
mean_count_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count) <- c("TF_0100", "TF_0500", "TF_0900","TF_1300", "TF_1700", "TF_2100")
mean_count_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
View(module_counts)
View(module_counts_Tfas)
mean_count_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count_Tlei) <- c("TL_0100", "TL_0500", "TL_0900","TL_1300", "TL_1700", "T_2100")
module_counts_Tfas <- module_counts[, c(1:36)]
mean_count_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count_Tfas) <- c("TF_0100", "TF_0500", "TF_0900","TF_1300", "TF_1700", "TF_2100")
mean_count_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count_Tlei) <- c("TL_0100", "TL_0500", "TL_0900","TL_1300", "TL_1700", "T_2100")
mean_count_Tfas$gene_id <- row.names(mean_count_Tfas)
mean_count_Tlei$gene_id <- row.names(mean_count_Tlei)
mean_count_Tfas_m <- melt(mean_count_Tfas, id.vars = "gene_id")
colnames(mean_count_Tfas_m) <- c("gene_id", "time", "count")
mean_count_Tlei_m <- melt(mean_count_Tlei, id.vars = "gene_id")
colnames(mean_count_Tlei_m) <- c("gene_id", "time", "count")
malate <- goterms[grep("malate", goterms$Term), 6]
malate_expr <- subset(mean_count_m, gene_id %in% malate)
malate_expr_Tfas <- subset(mean_count_Tfas_m, gene_id %in% malate)
malate_expr_Tlei <- subset(mean_count_Tlei_m, gene_id %in% malate)
means_Tfas <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
count = c(mean(mean_count_Tfas$`0100`), mean(mean_count_Tfas$`0500`),
mean(mean_count_Tfas$`0900`), mean(mean_count_Tfas$`1300`),
mean(mean_count_Tfas$`1700`), mean(mean_count_Tfas$`2100`)))
View(mean_count_Tfas_m)
View(mean_count_Tlei)
View(mean_count_Tfas)
summary(mean_count_Tfas)
mean_count_Tfas <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tfas[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count_Tfas) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_count_Tlei <- as.data.frame(sapply(seq(1, 6, 1), function(j) rowMeans(module_counts_Tlei[, c(j,j+6,j+12,j+18,j+24,j+30)])))
colnames(mean_count_Tlei) <- c("0100", "0500", "0900","1300", "1700", "2100")
mean_count_Tfas$gene_id <- row.names(mean_count_Tfas)
mean_count_Tlei$gene_id <- row.names(mean_count_Tlei)
summary(mean_count_Tfas)
mean_count_Tfas_m <- melt(mean_count_Tfas, id.vars = "gene_id")
colnames(mean_count_Tfas_m) <- c("gene_id", "time", "count")
mean_count_Tlei_m <- melt(mean_count_Tlei, id.vars = "gene_id")
colnames(mean_count_Tlei_m) <- c("gene_id", "time", "count")
malate_expr_Tfas <- subset(mean_count_Tfas_m, gene_id %in% malate)
malate_expr_Tlei <- subset(mean_count_Tlei_m, gene_id %in% malate)
mean(mean_count_Tfas$`0100`)
means_Tfas <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
count = c(mean(mean_count_Tfas$`0100`), mean(mean_count_Tfas$`0500`),
mean(mean_count_Tfas$`0900`), mean(mean_count_Tfas$`1300`),
mean(mean_count_Tfas$`1700`), mean(mean_count_Tfas$`2100`)))
means_Tlei <- data.frame(time=c("0100", "0500","0900", "1300", "1700", "2100"),
count = c(mean(mean_count_Tlei$`0100`), mean(mean_count_Tlei$`0500`),
mean(mean_count_Tlei$`0900`), mean(mean_count_Tlei$`1300`),
mean(mean_count_Tlei$`1700`), mean(mean_count_Tlei$`2100`)))
# Highlight genes of interest
ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr, aes(group = gene_id), size = 1, color = "darkgreen")
# Highlight genes of interest
ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen")
library(grid)
library(gridExtra)
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen")
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_leis, aes(group = gene_id), size = 1, color = "darkgreen")
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen")
grid.arrange(p1, p2, nrow = 1)
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen") +
title("Expression curve of module violet in T. fasciculata")
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen")
grid.arrange(p1, p2, nrow = 1)
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen") +
title("Expression curve of module violet in T. fasciculata")
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen") +
title("Expression curve of module violet in T. leiboldiana")
grid.arrange(p1, p2, nrow = 1)
grid.arrange(p1, p2, nrow = 1, top = "Expression curbe of MEViolet in T. fasciculata
(left) and T. leiboldiana (right)")
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 10, to = 150000, by = 25000)),
limits = c(0,150000))
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 10, to = 150000, by = 25000)),
limits = c(0,150000))
grid.arrange(p1, p2, nrow = 1, top = "Expression curve of MEViolet in T. fasciculata
(left) and T. leiboldiana (right)")
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 0, to = 150000, by = 25000)),
limits = c(0,151000))
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 0, to = 150000, by = 25000)),
limits = c(0,151000))
grid.arrange(p1, p2, nrow = 1, top = "Expression curve of MEViolet in T. fasciculata
(left) and T. leiboldiana (right)")
# Highlight genes of interest
p1 <- ggplot(mean_count_Tfas_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tfas, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tfas, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 0, to = 25000, by = 5000)),
limits = c(0,25000))
p2 <- ggplot(mean_count_Tlei_m, aes(x=time, y=count, group = gene_id)) +
geom_point(color = "grey") +
geom_line(color = "grey") +
geom_line(data = means_Tlei, aes(group = 1), size = 1, color = "black") +
geom_line(data = malate_expr_Tlei, aes(group = gene_id), size = 1, color = "darkgreen") +
scale_y_continuous(name="",
breaks = c(seq(from = 0, to = 25000, by = 5000)),
limits = c(0,25000))
grid.arrange(p1, p2, nrow = 1, top = "Expression curve of MEViolet in T. fasciculata
(left) and T. leiboldiana (right)")
View(module_counts)
View(module_counts_Tfas)
