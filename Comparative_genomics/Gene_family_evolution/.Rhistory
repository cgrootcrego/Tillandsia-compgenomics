# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_B1842" | uniq_map_rates_m$sample == "T.leiboldiana_B323",]
Tlei <- uniq_map_rates_m[uniq_map_rates_m$sample == "T.leiboldiana_GY146_XC"| uniq_map_rates_m$sample == "T.leiboldiana_GY142_XC"]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates_m[map_rates_m$sample == "T.leiboldiana_B1842" | map_rates_m$sample == "T.leiboldiana_B323",]
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates_m[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC"]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
rep(c(1),208)
map_rates$whatver <- rep(c(1),208)
ggplot(map_rates, aes(x= whatver, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate", "whatever")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
library(ggplot2)
library(plyr)
library(wesanderson)
setwd("/Users/clara/bio-info_phd/Comparative_genomics/Gene_family_evolution/")
tfas_genes <- read.table("Tfas_pergene_mediancov_and_orthoinfo.txt", header = T)
mean(tfas_genes$median_cov) # 47.3
mean(tfas_genes$mean_cov) # 47.9
# simplified categories
dup <- c()
for (i in 1:nrow(tfas_genes)){
if (tfas_genes[i,6] == 1 && tfas_genes[i,5] == 1 && tfas_genes[i,7] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tfas_genes[i,6] == 1){
dup <- c(dup, "single-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,5] == 0 && tfas_genes[i,7] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tfas_genes$duplicated <- dup
# Set colors for simple categories
mycolors <- c(wes_palette("Darjeeling1")[1], wes_palette("Darjeeling1")[2], wes_palette("FantasticFox1")[3],
wes_palette("Darjeeling1")[3], wes_palette("GrandBudapest1")[3])
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
#devtools::install_github("choisy/cutoff")
#install.packages("cli")
#install.packages("bbmle")
library(cutoff)
tfas_multicopy_median_cov <- as.vector(tfas_genes[tfas_genes$duplicated == 'multi-copy', 2])
tfas_multicopy_median_cov_df <- tfas_genes[tfas_genes$duplicated == 'multi-copy',]
tfas_multicopy_median_cov_subset <- tfas_multicopy_median_cov[tfas_multicopy_median_cov < 100]
tfas_multicopy_FMM <- em(tfas_multicopy_median_cov_subset, 'normal', 'normal')
hist(tfas_multicopy_median_cov_subset,10000,F,xlim=c(0,100),xlab="median coverage",ylab="density",main=NULL,col="grey")
lines(tfas_multicopy_FMM,lwd=1.5,col="red")
devtools::install_github("choisy/cutoff")
setwd("/Users/clara/Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
tfas_genes <- read.table("Tfas_pergene_mediancov_and_orthoinfo.txt", header = T)
mean(tfas_genes$median_cov) # 47.3
mean(tfas_genes$mean_cov) # 47.9
# simplified categories
dup <- c()
for (i in 1:nrow(tfas_genes)){
if (tfas_genes[i,6] == 1 && tfas_genes[i,5] == 1 && tfas_genes[i,7] ==1){
dup <- c(dup, "ancestral-single-copy")
} else if (tfas_genes[i,6] == 1){
dup <- c(dup, "single-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,5] == 0 && tfas_genes[i,7] == 0){
dup <- c(dup, "unique-multi-copy")
} else if (tfas_genes[i,6] > 1 && tfas_genes[i,6] == tfas_genes[i,5] && tfas_genes[i,6] == tfas_genes[i,7]){
dup <- c(dup, "ancestral-multi-copy")
} else {
dup <- c(dup, "multi-copy")
}
}
tfas_genes$duplicated <- dup
# Obtain average coverage for each category
mu <- ddply(tfas_genes, "dup", summarise, grp.mean=mean(median_cov))
head(mu)
# Set colors for simple categories
mycolors <- c(wes_palette("Darjeeling1")[1], wes_palette("Darjeeling1")[2], wes_palette("FantasticFox1")[3],
wes_palette("Darjeeling1")[3], wes_palette("GrandBudapest1")[3])
# Density plot of mean coverage per gene per category
ggplot(tfas_genes, aes(x=mean_cov, color=dup)) +
geom_density() +
xlim(0,150) +
geom_vline(xintercept = 46.1712, linetype = "longdash", colour = "gray28") +
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors)
#install.packages("cli")
#install.packages("bbmle")
library(cutoff)
tfas_multicopy_median_cov <- as.vector(tfas_genes[tfas_genes$duplicated == 'multi-copy', 2])
tfas_multicopy_median_cov_df <- tfas_genes[tfas_genes$duplicated == 'multi-copy',]
tfas_multicopy_median_cov_subset <- tfas_multicopy_median_cov[tfas_multicopy_median_cov < 100]
tfas_multicopy_FMM <- em(tfas_multicopy_median_cov_subset, 'normal', 'normal')
hist(tfas_multicopy_median_cov_subset,10000,F,xlim=c(0,100),xlab="median coverage",ylab="density",main=NULL,col="grey")
lines(tfas_multicopy_FMM,lwd=1.5,col="red")
cut_off <- cutoff(tfas_multicopy_FMM)
cut_off # Genes with mean cov < 35 belong to "faulty" category
tfas_multicopy_median_cov_subset <- tfas_multicopy_median_cov[tfas_multicopy_median_cov < 80]
tfas_multicopy_FMM <- em(tfas_multicopy_median_cov_subset, 'normal', 'normal')
hist(tfas_multicopy_median_cov_subset,10000,F,xlim=c(0,100),xlab="median coverage",ylab="density",main=NULL,col="grey")
lines(tfas_multicopy_FMM,lwd=1.5,col="red")
setwd("/Users/clara//Documents/GitHub/Tillandsia-compgenomics/Gene-family-evo-tfas-tlei/")
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections.txt", sep = '\t')
colnames(counts) <- c("og_id", "Acom", "Tfas", "Tlei")
# Filter out unique orthogroups
counts_Tfas_Tlei <- counts[counts$Tfas != 0 & counts$Tlei != 0,]
ggplot(counts_Tfas_Tlei, aes(x=Tfas, y=Tlei)) + geom_point(size = .5)
# Same without plastid annotations
counts_noplastid <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections-bothspecies.no_plastid-mito-ribo.txt",
sep = "\t")
colnames(counts_noplastid) <- c("og_id", "Acom", "Tfas", "Tlei")
counts_Tfas_Tlei_npl <- counts_noplastid[counts_noplastid$Tfas != 0 & counts_noplastid$Tlei != 0,]
ggplot(counts_Tfas_Tlei_npl, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.txt", sep = '\t')
counts <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections.txt", sep = '\t')
colnames(counts) <- c("og_id", "Acom", "Tfas", "Tlei")
ggplot(counts_Tfas_Tlei, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
counts_Tfas_Tlei <- counts_Tfas_Tlei[counts_Tfas_Tlei$og_id != "OG0000015",]
ggplot(counts_Tfas_Tlei, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
# Same without plastid annotations
counts_noplastid <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections-bothspecies.no_plastid-mito-ribo.txt",
sep = "\t")
colnames(counts_noplastid) <- c("og_id", "Acom", "Tfas", "Tlei")
counts_Tfas_Tlei_npl <- counts_noplastid[counts_noplastid$Tfas != 0 & counts_noplastid$Tlei != 0,]
ggplot(counts_Tfas_Tlei_npl, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
counts_Tfas_Tlei_npl <- counts_Tfas_Tlei_npl[counts_Tfas_Tlei_npl$og_id != "OG0000015",]
ggplot(counts_Tfas_Tlei_npl, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
# Same without plastid annotations
counts_noplastid <- read.table("orthogroups_Tfas_Tlei_Acom.counts.no_TEs.size_corrections-bothspecies.no_plastid-mito-ribo.txt",
sep = "\t")
ggplot(counts_Tfas_Tlei_npl, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
colnames(counts_noplastid) <- c("og_id", "Acom", "Tfas", "Tlei")
counts_Tfas_Tlei_npl <- counts_noplastid[counts_noplastid$Tfas != 0 & counts_noplastid$Tlei != 0,]
ggplot(counts_Tfas_Tlei_npl, aes(x=Tfas, y=Tlei)) + geom_point(size = .5) +
geom_abline(intercept = 0, slope = 1) +
labs(title = "Per-species gene counts in multi-copy orthogroups") +
ylab(label = "T. leiboldiana") +
xlab(label = "T. fasciculata") +
theme_bw()
library(ggplot2)
library(plyr)
library(wesanderson)
setwd("/Users/clara/bio-info_phd/Comparative_genomics/Gene_family_evolution/")
